using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Text.RegularExpressions;
using System.Web.DynamicData;
using System.Web.UI;
using System.Web.UI.WebControls;
using Federacao.Banco.EntityFramework;
using Input.Utilitarios;
using Federacao.Banco.Constants;
using Federacao.Banco.Classe;
using System.Web;
using System.Web.Optimization;
using System.Web.Configuration;
using System.Linq.Expressions;
using Input.Utilitarios.JS;
using Input.Utilitarios.STexto;
using System.Net.NetworkInformation;
using System.Security.Cryptography;
using static Federacao.Banco.Classe.Utilitarios;
using System.Data;

namespace Federacao.ModuloGeral.master
{
    public partial class MasterPessoa : System.Web.UI.MasterPage
    {
        private List<PESSOA_HISTORICO_EMAIL> LEmail
        {
            get
            {
                return (List<PESSOA_HISTORICO_EMAIL>)Session["ListaEmail"];
            }
            set
            {
                Session["ListaEmail"] = value;
            }
        }
        private int paginaEmailProp
        {
            get
            {
                if (Session["#Paginacao@@!"] != null)
                    return (int)Session["#Paginacao@@!"];
                else
                    return 1;
            }
            set { Session["#Paginacao@@!"] = value; }
        }

        public List<CAVALEIRO_REGISTRO> LRegist
        {
            get
            {
                return (List<CAVALEIRO_REGISTRO>)Session["RegistrosRegcvL"];
            }
            set
            {
                Session["RegistrosRegcvL"] = value;
            }
        }
        public static FederacaoEntities db
        {
            get { return Global.dbContext; }
            set { Global.dbContext = value; }
        }
        public bool OffLine { get { if (ViewState["OffLine"] == null) ViewState["OffLine"] = false; return (bool)ViewState["OffLine"]; } set { ViewState["OffLine"] = value; } }
        public int idPessoa
        {
            get
            {
                if (ViewState["idPessoa"] == null)
                    ViewState["idPessoa"] = 0;

                return (int)ViewState["idPessoa"];
            }
            set { ViewState["idPessoa"] = value; }
        }

        public bool isPessoaJuridica
        {
            get
            {
                return hfTipoPessoa.Value == "J";
            }
        }
        public bool isPessoaFisica
        {
            get
            {
                return hfTipoPessoa.Value == "F";
            }

        }
        public int setValAcao
        {
            get
            {
                if (ViewState["setValAcao"] == null)
                    ViewState["setValAcao"] = 0;

                return (int)ViewState["setValAcao"];
            }
            set { ViewState["setValAcao"] = value; }
        }
        public int setFederacao
        {
            get
            {
                if (ViewState["setFederacao"] == null)
                    ViewState["setFederacao"] = 0;

                return (int)ViewState["setFederacao"];
            }
            set { ViewState["setFederacao"] = value; }
        }
        public int pagina
        {
            get
            {
                if (Session["#Paginacao@@!"] != null)
                    return (int)Session["#Paginacao@@!"];
                else
                    return 1;
            }
            set { Session["#Paginacao@@!"] = value; }
        }

        //listas
        public List<PESSOA_NOME> ListaPesNom { get { if (ViewState["ListaPesNom"] == null) ViewState["ListaPesNom"] = new List<PESSOA_NOME>(); return (List<PESSOA_NOME>)ViewState["ListaPesNom"]; } set { ViewState["ListaPesNom"] = value; } }
        public List<PESSOA_ENDERECO> ListaPesEnd { get { if (ViewState["ListaPesEnd"] == null) ViewState["ListaPesEnd"] = new List<PESSOA_ENDERECO>(); return (List<PESSOA_ENDERECO>)ViewState["ListaPesEnd"]; } set { ViewState["ListaPesEnd"] = value; } }
        public List<PESSOA_TELEFONE> ListaPesTel { get { if (ViewState["ListaPesTel"] == null) ViewState["ListaPesTel"] = new List<PESSOA_TELEFONE>(); return (List<PESSOA_TELEFONE>)ViewState["ListaPesTel"]; } set { ViewState["ListaPesTel"] = value; } }
        public List<PESSOA_EMAIL> ListaPesEmail { get { if (ViewState["ListaPesEmail"] == null) ViewState["ListaPesEmail"] = new List<PESSOA_EMAIL>(); return (List<PESSOA_EMAIL>)ViewState["ListaPesEmail"]; } set { ViewState["ListaPesEmail"] = value; } }
        public List<PESSOA_RESPONSAVEL> ListaPesResp { get { if (ViewState["ListaPesResp"] == null) ViewState["ListaPesResp"] = new List<PESSOA_RESPONSAVEL>(); return (List<PESSOA_RESPONSAVEL>)ViewState["ListaPesResp"]; } set { ViewState["ListaPesResp"] = value; } }
        public List<PESSOA_CONTA_BANCARIA> ListaPessoaConta { get { if (ViewState["ListaPessoaConta"] == null) ViewState["ListaPessoaConta"] = new List<PESSOA_CONTA_BANCARIA>(); return (List<PESSOA_CONTA_BANCARIA>)ViewState["ListaPessoaConta"]; } set { ViewState["ListaPessoaConta"] = value; } }
        public List<PESSOA_DESPESA_AVULSA> ListaPessoaDespesa { get { if (ViewState["ListaPessoaDespesa"] == null) ViewState["ListaPessoaDespesa"] = new List<PESSOA_DESPESA_AVULSA>(); return (List<PESSOA_DESPESA_AVULSA>)ViewState["ListaPessoaDespesa"]; } set { ViewState["ListaPessoaDespesa"] = value; } }
        public List<CONTRATO_SERVICO> ListaContratoPessoa { get { if (ViewState["ListaContratoPessoa"] == null) ViewState["ListaContratoPessoa"] = new List<CONTRATO_SERVICO>(); return (List<CONTRATO_SERVICO>)ViewState["ListaContratoPessoa"]; } set { ViewState["ListaContratoPessoa"] = value; } }
        public List<PESSOA_FISICA_HOSPITAL> ListaHospitais { get { if (ViewState["ListaHospitais"] == null) ViewState["ListaHospitais"] = new List<PESSOA_FISICA_HOSPITAL>(); return (List<PESSOA_FISICA_HOSPITAL>)ViewState["ListaHospitais"]; } set { ViewState["ListaHospitais"] = value; } }
        public List<PESSOA_FISICA_ALERGIA> ListaAlergias { get { if (ViewState["ListaAlergias"] == null) ViewState["ListaAlergias"] = new List<PESSOA_FISICA_ALERGIA>(); return (List<PESSOA_FISICA_ALERGIA>)ViewState["ListaAlergias"]; } set { ViewState["ListaAlergias"] = value; } }
        public List<PESSOA_FISICA_REMEDIO> ListaMedicacoes { get { if (ViewState["ListaMedicacoes"] == null) ViewState["ListaMedicacoes"] = new List<PESSOA_FISICA_REMEDIO>(); return (List<PESSOA_FISICA_REMEDIO>)ViewState["ListaMedicacoes"]; } set { ViewState["ListaMedicacoes"] = value; } }
        public List<PESSOA_FISICA_CONTATO_EMERGENCIA> ListaPesTelEmer { get { if (ViewState["ListaPesTelEmer"] == null) ViewState["ListaPesTelEmer"] = new List<PESSOA_FISICA_CONTATO_EMERGENCIA>(); return (List<PESSOA_FISICA_CONTATO_EMERGENCIA>)ViewState["ListaPesTelEmer"]; } set { ViewState["ListaPesTelEmer"] = value; } }

        public TipoAcao tipoAcao
        {
            get
            {
                if (ViewState["tipoAcao"] != null)
                    return (TipoAcao)ViewState["tipoAcao"];

                tipoAcao = TipoAcao.Alteracao;
                return tipoAcao;
            }

            set
            {
                if (ViewState["tipoAcao"] != null)
                    ViewState["tipoAcao"] = value;
                else
                    ViewState.Add("tipoAcao", value);
            }
        }
        public PESSOA Pessoa
        {
            get
            {
                if (ViewState["Pessoa"] != null)
                    return (PESSOA)ViewState["Pessoa"];

                return null;
            }

            set
            {
                if (ViewState["Pessoa"] != null)
                    ViewState["Pessoa"] = value;
                else
                    ViewState.Add("Pessoa", value);
            }
        }

        protected string pathLogotipo
        {
            get { return (string)ViewState["pathLogotipo"]; }
            set { ViewState["pathLogotipo"] = value; }
        }
        protected string pathFoto
        {
            get { return (string)ViewState["pathFoto"]; }
            set { ViewState["pathFoto"] = value; }
        }

        protected string pathAssinatura
        {
            get { return (string)ViewState["pathAssinatura"]; }
            set { ViewState["pathAssinatura"] = value; }
        }

        public Int32 Federacao
        {
            get
            {
                try
                {
                    return Convert.ToInt32(ddlFedRepr.SelectedValue);
                }
                catch (Exception ex)
                {
                    Log.Logar(ex);
                    return 0;
                }
            }
        }

        protected void Pre_Init(object sender, EventArgs e)
        {
            #region Manipulação do Header da página
            /*Trecho responsável por não deixar a página cachear, no Chrome o cache prejudica na atualização(nova versão) do app para tirar fotos pela webcam*/
            Response.AppendHeader("Cache-Control", "no-cache, no-store, must-revalidate"); // HTTP 1.1.
            Response.AppendHeader("Pragma", "no-cache"); // HTTP 1.0.
            Response.AppendHeader("Expires", "0"); // Proxies. 
            #endregion
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                Ajax.JavascriptExecute(upEmail, "$('#dvCheckBoxlogin input[type=\"checkbox\"]').unbind(\"change\").change(function () {mostraEscondeLogin(this);});");
                Ajax.JavascriptExecute(upEmail, "$('#dvCheckBoxloginJur input[type=\"checkbox\"]').unbind(\"change\").change(function () {mostraEscondeLogin(this);});");
                using (FederacaoEntities ctx = new FederacaoEntities())
                {

                    if (!IsPostBack)
                    {
                        CadastroMasks();
                        bool isCavaleiro = false;
                        preencheDropBanco();
                        preencherDropCategoriaFincaneira();
                        bool bloqueiaEditarLogin = true;

                        txtFiltroDataInicial.Text = new DateTime(DateTime.Now.Year, 1, 1).ToString();
                        txtFiltroDataFinal.Text = new DateTime(DateTime.Now.Year + 1, 1, 1).AddDays(-1).ToString();

                        ListaPesNom = new List<PESSOA_NOME>();
                        ListaPesEnd = new List<PESSOA_ENDERECO>();
                        ListaPesTel = new List<PESSOA_TELEFONE>();
                        ListaPesEmail = new List<PESSOA_EMAIL>();
                        ListaPesResp = new List<PESSOA_RESPONSAVEL>();
                        ListaPessoaConta = new List<PESSOA_CONTA_BANCARIA>();
                        ListaPessoaDespesa = new List<PESSOA_DESPESA_AVULSA>();
                        ListaPesTelEmer = new List<PESSOA_FISICA_CONTATO_EMERGENCIA>();
                        ListaHospitais = new List<PESSOA_FISICA_HOSPITAL>();
                        ListaAlergias = new List<PESSOA_FISICA_ALERGIA>();
                        ListaMedicacoes = new List<PESSOA_FISICA_REMEDIO>();

                        if (Session["PESSOA#TipoFiltro"] != null)
                        {
                            String trocaControle = "$(document).ready(function () { DesabilitaStatus(); });";

                            switch (Session["PESSOA#TipoFiltro"].ToString())
                            {
                                case PESSOA_TIPO_FILTRO.COMPETIDOR:
                                    litTitulo.Text = "Incluindo Cavaleiro";
                                    hfTipoPessoa.Value = "F";

                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(21.6))
                                        Ajax.JavascriptExecute(upModalEnd, "$(document).ready(function(){ $('#TabContato a').addClass('hide'); });");

                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(21.2))
                                        Ajax.JavascriptExecute(upModalEnd, "ReadyOnlyCavaleiro();");

                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(21.14))
                                        Ajax.JavascriptExecute(this, trocaControle);

                                    isCavaleiro = true;
                                    bloqueiaEditarLogin = Utilitarios.UsuarioLogado.VerificaPermissao(21.18);
                                    break;
                                case PESSOA_TIPO_FILTRO.OFICIAL:
                                    litTitulo.Text = "Incluindo Oficial";
                                    hfTipoPessoa.Value = "F";
                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(24.4))
                                        Ajax.JavascriptExecute(this, trocaControle);
                                    bloqueiaEditarLogin = Utilitarios.UsuarioLogado.VerificaPermissao(24.5);
                                    break;
                                case PESSOA_TIPO_FILTRO.PROPRIETARIO:
                                    litTitulo.Text = "Incluindo Proprietário";
                                    hfTipoPessoa.Value = "F";

                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(25.4))
                                        Ajax.JavascriptExecute(this, trocaControle);
                                    bloqueiaEditarLogin = Utilitarios.UsuarioLogado.VerificaPermissao(25.5);
                                    break;
                                case PESSOA_TIPO_FILTRO.RESPONSAVEL:
                                    litTitulo.Text = "Incluindo Responsável";
                                    hfTipoPessoa.Value = "F";

                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(26.4))
                                        Ajax.JavascriptExecute(this, trocaControle);
                                    bloqueiaEditarLogin = Utilitarios.UsuarioLogado.VerificaPermissao(26.5);
                                    break;
                                case PESSOA_TIPO_FILTRO.STAFF:
                                    litTitulo.Text = "Incluindo Staff";
                                    hfTipoPessoa.Value = "F";
                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(27.4))
                                        Ajax.JavascriptExecute(this, trocaControle);
                                    bloqueiaEditarLogin = Utilitarios.UsuarioLogado.VerificaPermissao(27.5);
                                    break;
                                case PESSOA_TIPO_FILTRO.INSTRUTOR:
                                    litTitulo.Text = "Incluindo Instrutor";
                                    hfTipoPessoa.Value = "F";
                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(62.4))
                                        Ajax.JavascriptExecute(this, trocaControle);
                                    bloqueiaEditarLogin = Utilitarios.UsuarioLogado.VerificaPermissao(62.5);

                                    pnFederacaoRepresenta.Visible = phAssinatura.Visible = phAcessoLogin.Visible = pnNewsletter.Visible = false;
                                    break;
                                case PESSOA_TIPO_FILTRO.VETERINARIO:
                                    litTitulo.Text = "Incluindo Veterinário";
                                    hfTipoPessoa.Value = "F";
                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(28.4))
                                        Ajax.JavascriptExecute(this, trocaControle);
                                    bloqueiaEditarLogin = Utilitarios.UsuarioLogado.VerificaPermissao(28.5);
                                    break;
                                //-----------------------//
                                case PESSOA_TIPO_FILTRO.ASSOCIACAO:
                                    litTitulo.Text = "Incluindo Associação de Criadores";
                                    hfTipoPessoa.Value = "J";
                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(29.4))
                                        Ajax.JavascriptExecute(this, trocaControle);
                                    bloqueiaEditarLogin = Utilitarios.UsuarioLogado.VerificaPermissao(29.5);
                                    break;
                                case PESSOA_TIPO_FILTRO.EMPRESA:
                                    litTitulo.Text = "Incluindo Empresa";
                                    hfTipoPessoa.Value = "J";
                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(30.4))
                                        Ajax.JavascriptExecute(this, trocaControle);
                                    bloqueiaEditarLogin = Utilitarios.UsuarioLogado.VerificaPermissao(30.5);
                                    break;
                                case PESSOA_TIPO_FILTRO.CONFEDERACAO:
                                    litTitulo.Text = "Incluindo Confederação";
                                    hfTipoPessoa.Value = "J";
                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(59.4))
                                        Ajax.JavascriptExecute(this, trocaControle);
                                    bloqueiaEditarLogin = Utilitarios.UsuarioLogado.VerificaPermissao(59.5);
                                    break;
                                case PESSOA_TIPO_FILTRO.ENTIDADE:
                                    litTitulo.Text = "Incluindo Entidade";
                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(22.4))
                                        Ajax.JavascriptExecute(upModalEnd, "$(document).ready(function(){ $('#TabContato a').addClass('hide'); });");

                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(22.2))
                                        Ajax.JavascriptExecute(upModalEnd, "ReadyOnlyEntidade();");

                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(22.6))
                                        Ajax.JavascriptExecute(this, trocaControle);

                                    hfTipoPessoa.Value = "J";
                                    bloqueiaEditarLogin = Utilitarios.UsuarioLogado.VerificaPermissao(22.11);
                                    break;
                                case PESSOA_TIPO_FILTRO.FEDERACAO_HIPISMO:
                                    litTitulo.Text = "Incluindo Federação";
                                    hfTipoPessoa.Value = "J";
                                    if (!Utilitarios.UsuarioLogado.VerificaPermissao(23.4))
                                        Ajax.JavascriptExecute(this, trocaControle);
                                    bloqueiaEditarLogin = Utilitarios.UsuarioLogado.VerificaPermissao(23.5);
                                    break;
                                case PESSOA_TIPO_FILTRO.HOSPITAL:
                                    litTitulo.Text = "Incluindo Hospital";
                                    hfTipoPessoa.Value = "J";
                                    bloqueiaEditarLogin = false;
                                    break;
                                case PESSOA_TIPO_FILTRO.FORNECEDOR:
                                    litTitulo.Text = "Incluindo Fornecedor";
                                    hfTipoPessoa.Value = "J";
                                    bloqueiaEditarLogin = false;
                                    break;
                            }

                            this.verificaPermissaoVisualizarTabs();
                        }
                        else
                            Response.Redirect("~/home/Default.aspx");



                        #region Drops
                        ddlNacio.DataSource = ddlPaisJudiciario.DataSource = ddlPassaportePais.DataSource = ctx.NACIONALIDADE.OrderBy(x => x.NACI_DESCRICAO);
                        ddlNacio.DataBind();
                        ddlPassaportePais.DataBind();
                        ddlPaisJudiciario.DataBind();

                        ddlEstados.DataSource = Input.Utilitarios.Listas.listaEstados();
                        ddlEstados.DataBind();


                        ddlEst.DataSource = ddlCTPSUF.DataSource = ddlRGUF.DataSource = Listas.listaEstados();
                        ddlEst.DataBind();
                        ddlCTPSUF.DataBind();
                        ddlRGUF.DataBind();

                        ddlOper.DataSource = ctx.OPERADORA_CELULAR.OrderBy(x => x.OPCE_DESCRICAO);
                        ddlOper.DataBind();

                        ddlFedRepr.DataSource = ctx.FEDERACAO_HIPISMO
                                                   .Where(p => p.PESSOA_JURIDICA.PESSOA.PESS_STATUS == 1)
                                                   .Select(x => new { x.PESSOA_JURIDICA.PESSOA.PESS_PK_ID, x.PESSOA_JURIDICA.PESSOA.PESS_APELIDO })
                                                   .OrderBy(x => x.PESS_APELIDO);
                        ddlFedRepr.DataBind();

                        ddlGrupoUsuario.DataSource = ctx.GRUPO_USUARIO;
                        ddlGrupoUsuario.DataBind();

                        ddlGrupoUsuarioJur.DataSource = ctx.GRUPO_USUARIO;
                        ddlGrupoUsuarioJur.DataBind();


                        ddlEntidadeLogin.DataSource = ctx.ENTIDADE
                                                         .Select(x => new { x.PESSOA_JURIDICA.PESSOA.PESS_PK_ID, x.PESSOA_JURIDICA.PESSOA.PESS_NOME })
                                                         .OrderBy(x => x.PESS_NOME);

                        ddlEntidadeLogin.DataBind();

                        ddlEntidadeLoginJur.DataSource = ctx.ENTIDADE
                                                         .Select(x => new { x.PESSOA_JURIDICA.PESSOA.PESS_PK_ID, x.PESSOA_JURIDICA.PESSOA.PESS_NOME })
                                                         .OrderBy(x => x.PESS_NOME);
                        ddlEntidadeLoginJur.DataBind();



                        ddlCategFinan.DataSource = ctx.CATEGORIA_FINANCEIRO.Where(x => x.CAFI_ATIVO)
                                                                           .Select(x => new { x.CAFI_PK_ID, x.CAFI_DESCRICAO });
                        ddlCategFinan.DataBind();

                        #endregion

                        if (int.TryParse(Request.QueryString["PESS_PK_ID"], out int ID))
                        {
                            idPessoa = ID;
                            Pessoa = ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == ID);

                            if (Pessoa != null)
                            {
                                ddlCategFinan.SelectedValue = Pessoa.CATEGORIA_FINANCEIRO != null ? Pessoa.CATEGORIA_FINANCEIRO.CAFI_PK_ID.ToString() : String.Empty;

                                if (Pessoa.USUARIO != null)
                                {
                                    pnEmailSenhaLogin.Visible = cbCriarUsuario.Checked = pnEmailSenhaLoginJur.Visible = cbCriarUsuarioJur.Checked = true;
                                    txtEmailLogin.Text = txtEmailLoginJur.Text = litEmailBloqueado.Text = litEmailBloqueadoJur.Text = Pessoa.USUARIO.USUA_EMAIL;
                                    ddlRedefinirLogin.SelectedValue = ddlRedefinirLoginJur.SelectedValue = Convert.ToInt32(Pessoa.USUARIO.USUA_REDEFINIR ?? false).ToString();
                                    litRedefinirBloqueado.Text = litRedefinirBloqueadoJur.Text = Pessoa.USUARIO.USUA_REDEFINIR ?? false ? "Sim" : "Não";

                                    if (Pessoa.USUARIO.GRUPO_USUARIO != null)
                                    {
                                        ddlGrupoUsuario.SelectedValue = ddlGrupoUsuarioJur.SelectedValue = Pessoa.USUARIO.GRUPO_USUARIO.GRUS_PK_ID.ToString();
                                        litGrupoUsuarioBloqueado.Text = litGrupoUsuarioBloqueadoJur.Text = ddlGrupoUsuario.SelectedItem.Text;
                                    }
                                    if (Pessoa.USUARIO.ENTIDADE != null)
                                    {
                                        ddlEntidadeLogin.SelectedValue = ddlEntidadeLoginJur.SelectedValue = Pessoa.USUARIO.ENTIDADE.PESSOA_JURIDICA.PESSOA.PESS_PK_ID.ToString();
                                        litEntidadeBloqueado.Text = litEntidadeBloqueadoJur.Text = ddlEntidadeLogin.SelectedItem.Text;
                                    }
                                }
                                else
                                    pnEmailSenhaLogin.Visible = cbCriarUsuario.Checked = pnEmailSenhaLoginJur.Visible = cbCriarUsuarioJur.Checked = false;

                                pnLoginLiberado.Visible = pnLoginLiberadoJur.Visible = bloqueiaEditarLogin;
                                pnLoginBloqueado.Visible = pnLoginBloqueadoJur.Visible = !bloqueiaEditarLogin;

                                litTitulo.Text = Pessoa.PESS_NOME;
                                switch (hfTipoPessoa.Value)
                                {
                                    case "F":
                                        Pessoa.PESSOA_FISICAReference.Load();
                                        instanciaTipos(ctx, Pessoa.PESSOA_FISICA);
                                        txtTratamento.Text = Pessoa.PESSOA_FISICA.PEFI_TRATAMENTO;
                                        txtIdade.Text = txtIdade_DM.Text = Texto.calculaIdade(Pessoa.PESSOA_FISICA.PEFI_NASC_DATA_HORA);

                                        if (Pessoa.PESSOA_FISICA.NACIONALIDADE != null)
                                            ddlNacio.SelectedValue = Pessoa.PESSOA_FISICA.NACIONALIDADE.NACI_PK_ID.ToString();
                                        if (Pessoa.PESSOA_FISICA.NACIONALIDADEPASSAPORTE != null)
                                            ddlPassaportePais.SelectedValue = Pessoa.PESSOA_FISICA.NACIONALIDADEPASSAPORTE.NACI_PK_ID.ToString();

                                        txtTratamento.Text = Pessoa.PESSOA_FISICA.PEFI_TRATAMENTO;
                                        txtRGorg.Text = Pessoa.PESSOA_FISICA.PEFI_RG_ORGAO;
                                        txtRGnum.Text = Pessoa.PESSOA_FISICA.PEFI_RG_NUM;
                                        ddlRGUF.SelectedValue = Pessoa.PESSOA_FISICA.PEFI_RG_UF;
                                        txtRGExp.Text = Pessoa.PESSOA_FISICA.PEFI_RG_DATA_EXPEDICAO.ToString();
                                        txtCPFnum.Text = Pessoa.PESSOA_FISICA.PEFI_CPF_NUM;
                                        txtCPFexp.Text = Pessoa.PESSOA_FISICA.PEFI_CPF_DATA_EXPEDICAO.ToString();
                                        txtNasc.Text = Pessoa.PESSOA_FISICA.PEFI_NASC_DATA_HORA.ToString();
                                        txtCNHnum.Text = Pessoa.PESSOA_FISICA.PEFI_CNH_NUM;
                                        txtCNHvali.Text = Pessoa.PESSOA_FISICA.PEFI_CNH_DATA_VALIDADE.ToString();
                                        ddlCNHcat.SelectedValue = Pessoa.PESSOA_FISICA.PEFI_CNH_CATEGORIA;
                                        txtCNHexp.Text = Pessoa.PESSOA_FISICA.PEFI_CNH_DATA_EXPEDICAO.ToString();
                                        txtCTPSexp.Text = Pessoa.PESSOA_FISICA.PEFI_CTPS_DATA_EXPEDICAO.ToString();
                                        txtCTPSnum.Text = Pessoa.PESSOA_FISICA.PEFI_CTPS_NUM;
                                        txtCTPSser.Text = Pessoa.PESSOA_FISICA.PEFI_CTPS_SERIE;
                                        ddlCTPSUF.SelectedValue = Pessoa.PESSOA_FISICA.PEFI_CTPS_UF;
                                        txtTEexp.Text = Pessoa.PESSOA_FISICA.PEFI_TITULO_ELEITOR_DATA_EXPEDICAO.ToString();
                                        txtTEnum.Text = Pessoa.PESSOA_FISICA.PEFI_TITULO_ELEITOR_NUM;
                                        txtTEsecao.Text = Pessoa.PESSOA_FISICA.PEFI_TITULO_ELEITOR_SECAO.ToString();
                                        txtTEzona.Text = Pessoa.PESSOA_FISICA.PEFI_TITULO_ELEITOR_ZONA.ToString();
                                        txtPISPano.Text = Pessoa.PESSOA_FISICA.PEFI_PISPASEP_ANO.ToString();
                                        txtPISPexp.Text = Pessoa.PESSOA_FISICA.PEFI_PESPASEP_DATA_EXPEDICAO.ToString();
                                        txtPISPnum.Text = Pessoa.PESSOA_FISICA.PEFI_PISPASEP_NUM;
                                        txtPassaporteNum.Text = Pessoa.PESSOA_FISICA.PEFI_PASSAPORTE_NUM;
                                        cbNewsLet.Checked = Pessoa.PESS_NEWSLETTER == null ? false : (bool)Pessoa.PESS_NEWSLETTER;
                                        txtObserv.Text = Pessoa.PESS_OBSERVACAO;

                                        ddlSexo.SelectedValue = Pessoa.PESSOA_FISICA.PEFI_SEXO;

                                        #region TAB DADOS MEDICOS
                                        #region Listas Dados Medicos
                                        ddlConvenio_DM.DataSource = ctx.CONVENIO.ToList();
                                        ddlConvenio_DM.DataBind();
                                        ddlConvenio_DM.Items.Insert(0, new ListItem("", ""));

                                        lvContatosEmergencia.DataSource = Pessoa.PESSOA_FISICA.PESSOA_FISICA_CONTATO_EMERGENCIACollection.ToList();
                                        lvContatosEmergencia.DataBind();

                                        lvHospitais.DataSource = ctx.PESSOA_FISICA_HOSPITAL.Where(x => x.PESSOA_FISICA.PEFI_PK_FK_PESS == idPessoa).Select(x => x.HOSPITAL.PESSOA_JURIDICA.PESSOA);
                                        lvHospitais.DataBind();

                                        ddlAlergias.DataSource = ctx.ALERGIA.ToList();
                                        ddlAlergias.DataBind();
                                        ddlAlergias.Items.Insert(0, new ListItem("", ""));

                                        lvAlergias.DataSource = ctx.PESSOA_FISICA_ALERGIA.Where(x => x.PESSOA_FISICA.PEFI_PK_FK_PESS == idPessoa).Select(x => x.ALERGIA);
                                        lvAlergias.DataBind();

                                        ddlMedicacoes.DataSource = ctx.REMEDIO.ToList();
                                        ddlMedicacoes.DataBind();
                                        ddlMedicacoes.Items.Insert(0, new ListItem("", ""));

                                        lvMedicacoes.DataSource = ctx.PESSOA_FISICA_REMEDIO.Where(x => x.PESSOA_FISICA.PEFI_PK_FK_PESS == idPessoa).Select(x => x.REMEDIO);
                                        lvMedicacoes.DataBind();
                                        #endregion

                                        if (Pessoa.PESSOA_FISICA.PESSOA_FISICA_DADOS_MEDICOS != null)
                                        {
                                            var DadosMedicos = Pessoa.PESSOA_FISICA.PESSOA_FISICA_DADOS_MEDICOS;

                                            txtPeso_DM.Text = DadosMedicos.PFDM_PESO.ToString();
                                            txtAltura_DM.Text = DadosMedicos.PFDM_ALTURA.ToString();
                                            txtTipoSangue_DM.Text = DadosMedicos.PFDM_TIPO_SANGUINEO.ToString();
                                            ckPrimeirosSocorros_DM.Checked = DadosMedicos.PFDM_PRIMEIROS_SOCORROS != null ? Convert.ToBoolean(DadosMedicos.PFDM_PRIMEIROS_SOCORROS) : false;
                                            ckHospitalRegiao_DM.Checked = DadosMedicos.PFDM_ENCAMINHA_HOSPITAL != null ? Convert.ToBoolean(DadosMedicos.PFDM_ENCAMINHA_HOSPITAL) : false;
                                            txtObsGerais_DM.Text = DadosMedicos.PFDM_OBSERVACAO;
                                            txtHistorico_DM.Text = DadosMedicos.PFDM_HIST_MED_CIRUR;
                                            ddlConvenio_DM.SelectedValue = DadosMedicos.CONVENIO != null ? DadosMedicos.CONVENIO.CONV_PK_ID.ToString() : "";
                                            txtNumero_DM.Text = DadosMedicos.PFDM_NUM_CONVENIO.ToString();
                                            txtTelefone_DM.Text = DadosMedicos.PFDM_TEL_CONVENIO.ToString();

                                            #region RadionButton Doenças
                                            if (DadosMedicos.PFDM_DIST_VISUAL != null)
                                            {
                                                rbDisturbiosVisuais_Sim.Checked = DadosMedicos.PFDM_DIST_VISUAL == true ? true : false;
                                                rbDisturbiosVisuais_Nao.Checked = DadosMedicos.PFDM_DIST_VISUAL == false ? true : false;
                                            }

                                            if (DadosMedicos.PFDM_DIST_AUDITIVO != null)
                                            {
                                                rbDisturbiosAuditivos_Sim.Checked = DadosMedicos.PFDM_DIST_AUDITIVO == true ? true : false;
                                                rbDisturbiosAuditivos_Nao.Checked = DadosMedicos.PFDM_DIST_AUDITIVO == false ? true : false;
                                            }

                                            if (DadosMedicos.PFDM_TABAGISMO != null)
                                            {
                                                rbTabagismo_Sim.Checked = DadosMedicos.PFDM_TABAGISMO == true ? true : false;
                                                rbTabagismo_Nao.Checked = DadosMedicos.PFDM_TABAGISMO == false ? true : false;
                                            }

                                            if (DadosMedicos.PFDM_PROBL_RESPIRAT != null)
                                            {
                                                rbProblemasRespira_Sim.Checked = DadosMedicos.PFDM_PROBL_RESPIRAT == true ? true : false;
                                                rbProblemasRespira_Nao.Checked = DadosMedicos.PFDM_PROBL_RESPIRAT == false ? true : false;
                                            }

                                            if (DadosMedicos.PFDM_SINUSITE != null)
                                            {
                                                rbSinusite_Sim.Checked = DadosMedicos.PFDM_SINUSITE == true ? true : false;
                                                rbSinusite_Nao.Checked = DadosMedicos.PFDM_SINUSITE == false ? true : false;
                                            }

                                            if (DadosMedicos.PFDM_RINITE != null)
                                            {
                                                rbRinite_Sim.Checked = DadosMedicos.PFDM_RINITE == true ? true : false;
                                                rbRinite_Nao.Checked = DadosMedicos.PFDM_RINITE == false ? true : false;
                                            }

                                            if (DadosMedicos.PFDM_PROBL_CARDIACOS != null)
                                            {
                                                rbProblemaCardio_Sim.Checked = DadosMedicos.PFDM_PROBL_CARDIACOS == true ? true : false;
                                                rbProblemaCardio_Nao.Checked = DadosMedicos.PFDM_PROBL_CARDIACOS == false ? true : false;
                                            }

                                            if (DadosMedicos.PFDM_ARRITMIA != null)
                                            {
                                                rbArritimia_Sim.Checked = DadosMedicos.PFDM_ARRITMIA == true ? true : false;
                                                rbArritimia_Nao.Checked = DadosMedicos.PFDM_ARRITMIA == false ? true : false;
                                            }

                                            if (DadosMedicos.PFDM_DIABETICO != null)
                                            {
                                                rbDiabetico_Sim.Checked = DadosMedicos.PFDM_DIABETICO == true ? true : false;
                                                rbDiabetico_Nao.Checked = DadosMedicos.PFDM_DIABETICO == false ? true : false;
                                            }

                                            if (DadosMedicos.PFDM_HIPERTENSO != null)
                                            {
                                                rbHipertenso_Sim.Checked = DadosMedicos.PFDM_HIPERTENSO == true ? true : false;
                                                rbHipertenso_Nao.Checked = DadosMedicos.PFDM_HIPERTENSO == false ? true : false;
                                            }
                                            #endregion
                                        }
                                        #endregion

                                        if (Pessoa.PESSOA_JURIDICAPai != null)
                                            ddlFedRepr.SelectedValue = Pessoa.PESSOA_JURIDICAPai.PEJU_PK_FK_PESS.ToString();
                                        pathFoto = IO.ListaArquivos(String.Format("~/uploads/pessoa/{0}/pequena", ID)).FirstOrDefault();
                                        btnForceImgFotoBind_Click(null, EventArgs.Empty);
                                        pathAssinatura = IO.ListaArquivos(String.Format("~/uploads/pessoa/{0}/assinatura", ID)).FirstOrDefault();
                                        btnForceImgAssinaturaBind_Click(null, EventArgs.Empty);
                                        pnQualExibir.Visible = false;
                                        pnNomeFantasia.Visible = false;
                                        break;
                                    case "J":
                                        Pessoa.PESSOA_JURIDICAReference.Load();
                                        instanciaTipos(ctx, Pessoa.PESSOA_JURIDICA);

                                        if (Pessoa.PESSOA_JURIDICA != null && Pessoa.PESSOA_JURIDICA.NACIONALIDADE != null)
                                        {
                                            ddlPaisJudiciario.SelectedValue = Pessoa.PESSOA_JURIDICA.NACIONALIDADE.NACI_PK_ID.ToString();

                                            if (Pessoa.PESSOA_JURIDICA.NACIONALIDADE.NACI_PK_ID == 1)
                                            {
                                                phEstado.Visible = true;
                                                ddlEstados.SelectedValue = Pessoa.PESSOA_JURIDICA.PEJU_UF;
                                            }
                                        }

                                        txtCNPJ.Text = Pessoa.PESSOA_JURIDICA.PEJU_CNPJ_NUM;
                                        txtInscEst.Text = Pessoa.PESSOA_JURIDICA.PEJU_IE_NUM;
                                        txtHomePage.Text = Pessoa.PESSOA_JURIDICA.PEJU_SITE;
                                        txtFacebook.Text = Pessoa.PESSOA_JURIDICA.PEJU_FACEBOOK;
                                        txtTwitter.Text = Pessoa.PESSOA_JURIDICA.PEJU_TWITTER;

                                        if (Pessoa.PESSOA_JURIDICA.PEJU_DATA_FUNDACAO != null)
                                            txtDataFundacao.Text = Pessoa.PESSOA_JURIDICA.PEJU_DATA_FUNDACAO.ToString();

                                        if (Pessoa.PESSOA_JURIDICA.PESSOA_FISICAPresidente != null)
                                        {
                                            txtNomePres.Text = Pessoa.PESSOA_JURIDICA.PESSOA_FISICAPresidente.PESSOA.PESS_NOME;
                                            hfIDpres.Value = Pessoa.PESSOA_JURIDICA.PESSOA_FISICAPresidente.PESSOA.PESS_PK_ID.ToString();
                                        }
                                        if (Pessoa.PESSOA_JURIDICA.PESSOA_FISICAVicePresidente != null)
                                        {
                                            txtNomeVicePres.Text = Pessoa.PESSOA_JURIDICA.PESSOA_FISICAVicePresidente.PESSOA.PESS_NOME;
                                            hfIDvicepres.Value = Pessoa.PESSOA_JURIDICA.PESSOA_FISICAVicePresidente.PESSOA.PESS_PK_ID.ToString();
                                        }
                                        txtObsJur.Text = Pessoa.PESS_OBSERVACAO;

                                        if (Pessoa.PESS_IMAGEM == null)
                                            pathLogotipo = IO.ListaArquivos(String.Format("~/uploads/pessoa/{0}/pequena", ID)).FirstOrDefault();
                                        else
                                        {
                                            IO.SalvaImagem(Pessoa.PESS_IMAGEM, String.Format("~/uploads/pessoa/{0}/pequena", ID), String.Format("{0}.jpg", ID));
                                            pathLogotipo = String.Format("~/uploads/pessoa/{0}/pequena/{0}.jpg", ID);
                                        }
                                        btnForceImgLogotipoBind_Click(null, EventArgs.Empty);
                                        pnQualExibir.Visible = true;
                                        pnNomeFantasia.Visible = true;
                                        break;
                                }

                                if (Pessoa.PESS_STATUS != null)
                                {
                                    string status = string.Empty;
                                    string classe = string.Empty;
                                    switch (Pessoa.PESS_STATUS)
                                    {
                                        case 1:
                                            status = "Ativo";
                                            classe = "label-success";
                                            if (hfTipoPessoa.Value == "F")
                                            {
                                                ddlStatus.SelectedValue = "1";
                                                cbCriarUsuario.Checked = true;
                                                cbCriarUsuario_CheckedChangedTrue();
                                            }
                                            else
                                            {
                                                ddlStatusJur.SelectedValue = "1";
                                                cbCriarUsuarioJur.Checked = true;
                                                cbCriarUsuario_CheckedChangedTrue();
                                            }
                                            break;
                                        case 0:
                                            status = "Inativo";
                                            classe = "alert-error";
                                            if (hfTipoPessoa.Value == "F")
                                                ddlStatus.SelectedValue = "0";
                                            else
                                                ddlStatusJur.SelectedValue = "0";
                                            break;
                                        case 2:
                                            status = "Sob aprovação";
                                            classe = "alert-block";
                                            if (hfTipoPessoa.Value == "F")
                                                ddlStatus.SelectedValue = "2";
                                            else
                                                ddlStatusJur.SelectedValue = "2";
                                            break;
                                        case 3:
                                            status = "Bloqueado";
                                            classe = "alert-info";
                                            if (hfTipoPessoa.Value == "F")
                                                ddlStatus.SelectedValue = "3";
                                            else
                                                ddlStatusJur.SelectedValue = "3";
                                            break;
                                        default:
                                            break;
                                    }

                                    litStatus.Text = "<span class=\"status\">Status<strong class=\"label " + classe + "\">" + status + "</strong></span>";

                                    bindNomes();

                                    lvEnd.DataSource = ctx.PESSOA_ENDERECO.Where(p => p.PESSOA.PESS_PK_ID == ID);
                                    lvEnd.DataBind();

                                    lvTel.DataSource = ctx.PESSOA_TELEFONE.Where(p => p.PESSOA.PESS_PK_ID == ID);
                                    lvTel.DataBind();

                                    lvEmail.DataSource = ctx.PESSOA_EMAIL.Where(p => p.PESSOA.PESS_PK_ID == ID);
                                    lvEmail.DataBind();

                                    lvResp.DataSource = ctx.PESSOA_RESPONSAVEL.Where(p => p.PESSOA.PESS_PK_ID == ID);
                                    lvResp.DataBind();

                                    lvContas.DataSource = ctx.PESSOA_CONTA_BANCARIA.Where(p => p.PESSOA.PESS_PK_ID == ID);
                                    lvContas.DataBind();

                                    lvDespesas.DataSource = ctx.PESSOA_DESPESA_AVULSA.Where(p => p.PESSOA.PESS_PK_ID == ID && p.DUPLICATA == null);
                                    lvDespesas.DataBind();

                                    //condição para mostrar o botão Gerar Boleto apenas quando a lista de despesas ter algum registro
                                    verificaListaDespesa();

                                    bindServicos();
                                    verificaListaServico();
                                }
                            }
                        }
                        else
                        {
                            if (hfTipoPessoa.Value.Equals("F"))
                            {
                                if (Session["Nascimento"] != null)
                                    txtNasc.Text = Session["Nascimento"].ToString();

                                if (Session["RG"] != null)
                                    txtRGnum.Text = Session["RG"].ToString();

                                if (Session["CPF"] != null)
                                    txtCPFnum.Text = Session["CPF"].ToString();

                                pnQualExibir.Visible = false;
                                pnNomeFantasia.Visible = false;

                            }
                            else
                            {
                                if (Session["CNPJ"] != null)
                                    txtCNPJ.Text = Session["CNPJ"].ToString();

                                if (Session["IE"] != null)
                                    txtInscEst.Text = Session["IE"].ToString();

                                pnQualExibir.Visible = true;
                                pnNomeFantasia.Visible = true;

                            }

                            Session.Remove("Nascimento");
                            Session.Remove("RG");
                            Session.Remove("CPF");
                            Session.Remove("Sigla");
                            Session.Remove("CNPJ");
                            Session.Remove("IE");

                            imgFoto.ImageUrl = "~/assets/img/semImagem.jpg";
                            imgFoto.DataBind();
                        }
                        //Upload de Documentos

                        bindDocs();

                        if (isCavaleiro)
                        {
                            if (idPessoa != 0)
                            {
                                var _torneioInscricao = ctx.TORNEIO_INSCRICAO.SelectMany(p => p.TORNEIO_INSCRICAO_SERIECollection)
                                                                             .Any(x => x.CAVALEIRO.PESSOA_FISICA.PESSOA.PESS_PK_ID == idPessoa &&
                                                                                       x.TORNEIO_INSCRICAO.TORNEIO.TORN_STATUS != 2 &&
                                                                                       x.TORNEIO_INSCRICAO.TORNEIO.TORN_OFFLINE);

                                if (_torneioInscricao)
                                {
                                    OffLine = true;
                                    Ajax.jQueryExecuteReady(this, "TorneioOffline();");
                                }

                            }
                        }
                        carregaFederacoes();
                    }                    

                }
                if (!Utilitarios.UsuarioLogado.UsuarioEntidade && Utilitarios.UsuarioLogado.USUA_INPUT == false)
                {
                    pnLoginLiberadoJur.Visible = false;
                    pnLoginBloqueadoJur.Visible = true;
                    divServ.Visible = false;
                }
                Buscar();
            }
            catch (Exception ex)
            {
                Ajax.JavascriptAlert(Page, ex.Message.ToString());
            }
        }
        protected void cbCriarUsuario_CheckedChangedTrue()
        {
            pnEmailSenhaLogin.Visible = cbCriarUsuario.Checked;
            pnEmailSenhaLoginJur.Visible = cbCriarUsuarioJur.Checked;
            CadastroMasks();
        }
        protected void cbCriarUsuario_CheckedChanged(object sender, EventArgs e)
        {
            cbCriarUsuario_CheckedChangedTrue();
        }
        protected void alteraDrop(object sender, EventArgs e)
        {
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                PESSOA_EMAIL emailPessoa = null;
                if (int.TryParse(Request.QueryString["PESS_PK_ID"], out int idPessoa))
                    emailPessoa = ctx.PESSOA_EMAIL.FirstOrDefault(x => x.PESSOA.PESS_PK_ID == idPessoa);

                if (ddlStatus.SelectedValue == "1")
                {
                    if (hfTipoPessoa.Value == "F")
                    {
                        CAVALEIRO_ENTIDADE cavaleiroEntidade = ctx.CAVALEIRO_ENTIDADE.FirstOrDefault(x => x.CAVALEIRO.CAVL_PK_FK_PEFI == idPessoa);

                        cbCriarUsuario.Checked = true;
                        txtEmailLogin.Text = ((emailPessoa != null) ? emailPessoa.PEEM_EMAIL : String.Empty);
                        txtSenha.Text = "123";
                        ddlEntidadeLogin.SelectedValue = ((cavaleiroEntidade != null) ? cavaleiroEntidade.ENTIDADE.ENTI_PK_FK_PEJU.ToString() : "");
                        ddlRedefinirLogin.SelectedValue = "1";
                        cbCriarUsuario_CheckedChangedTrue();
                    }
                    else
                    {
                        cbCriarUsuarioJur.Checked = true;
                        txtEmailLoginJur.Text = ((emailPessoa != null) ? emailPessoa.PEEM_EMAIL : String.Empty);
                        txtSenhaJur.Text = "123";
                        ddlRedefinirLoginJur.SelectedValue = "1";
                        cbCriarUsuario_CheckedChangedTrue();
                    }
                }
                else
                {
                    if (hfTipoPessoa.Value == "F")
                    {
                        cbCriarUsuario.Checked = false;
                        cbCriarUsuario_CheckedChangedTrue();
                    }
                    else
                    {
                        cbCriarUsuarioJur.Checked = false;
                        cbCriarUsuario_CheckedChangedTrue();
                    }
                }
            }
        }

        #region Helpers
        protected void change_estado(object sender, EventArgs e)
        {
            troca_estado();
        }

        private void instanciaTipos(FederacaoEntities _FederacaoEntities, PESSOA_FISICA _pessoa)
        {
            var myMetaTable = DynamicDataRouteHandler.GetRequestMetaTable(Context);

            if (myMetaTable != null)
            {
                switch (myMetaTable.ToString().ToUpper())
                {
                    case "CAVALEIRO":
                        _pessoa.CAVALEIRO = realizaInstancia<CAVALEIRO>(_pessoa.CAVALEIRO);
                        break;
                    default:
                        break;
                }
                if (_FederacaoEntities != null)
                    _FederacaoEntities.SaveChanges();
            }
        }
        private void instanciaTipos(FederacaoEntities _FederacaoEntities, PESSOA_JURIDICA _pessoa)
        {
            var myMetaTable = DynamicDataRouteHandler.GetRequestMetaTable(Context);

            if (myMetaTable != null)
            {
                switch (myMetaTable.ToString().ToUpper())
                {
                    case "ENTIDADE":
                        _pessoa.ENTIDADE = realizaInstancia<ENTIDADE>(_pessoa.ENTIDADE);
                        break;
                    default:
                        break;
                }
                if (_FederacaoEntities != null)
                    _FederacaoEntities.SaveChanges();
            }
        }

        private T realizaInstancia<T>(T objReal)
        {
            if (objReal == null)
                return (T)Activator.CreateInstance(typeof(T));
            else
                return objReal;
        }

        protected void MostrarEstados_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (ddlPaisJudiciario.SelectedValue == "1")
                {
                    phEstado.Visible = true;
                }
                else
                {
                    phEstado.Visible = false;
                }
                upEstados.Update();
            }
            catch (Exception ex)
            {
                Log.Logar(ex);
                Ajax.JavascriptAlert(this.Page, "Erro ao mostrar estados");
            }
            CadastroMasks();

        }

        protected void change_municipio(object sender, EventArgs e)
        {
            troca_municipio();
        }

        protected void txtCep_TextChanged(object sender, EventArgs e)
        {
            /*esse metodo pesquisa e preenche os campos: endereço, estado, municipio e bairro
             * pesquisando pelo cep digitado
            */
            try
            {
                FederacaoEntities APP = new FederacaoEntities();

                int? CEP = Texto.ConvertToInt32(txtCep.Text);
                LOGRADOURO Logradouro = APP.LOGRADOURO.FirstOrDefault(p => p.LOGR_CEP == CEP);

                ddlEst.SelectedValue = ddlEst.Items.FindByText(Logradouro.BAIRRO.MUNICIPIO.MUN_ESTADO).Value;
                troca_estado();

                ddlMun.SelectedValue = ddlMun.Items.FindByText(Logradouro.BAIRRO.MUNICIPIO.MUN_DESCRICAO).Value;
                troca_municipio();

                ddlBai.SelectedValue = ddlBai.Items.FindByText(Logradouro.BAIRRO.BAIR_DESCRICAO).Value;

                txtEnde.Text = Logradouro.TIPO_LOGRADOURO.TILO_DESCRICAO + " " + Logradouro.LOGR_DESCRICAO;

            }
            catch (Exception ex)
            {
                Log.Logar(ex);
                Ajax.JavascriptAlert(upEndereco, "Erro ao pesquisar o endereço pelo cep: " + ex.Message);
            }
            finally
            {
                ddlEndTipo.Focus();
            }
        }

        protected void DropDownList_DataBound(object sender, EventArgs e)
        {
            (sender as DropDownList).Items.Insert(0, new ListItem("Selecionar", String.Empty));
        }

        protected void verificaEmailUtilizado_onTextChanged(object sender, EventArgs e)
        {
            var txtBox = (TextBox)sender;
            var email = txtBox.Text.ToLower().Trim();

            var uPanel = txtBox == txtEmailLogin ? upLogin : upLoginJur;

            if (emailValido(email))
            {
                int? idPessoa = null;
                if (Request.QueryString["PESS_PK_ID"] != null)
                    idPessoa = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);

                using (FederacaoEntities myFederacaoEntities = new FederacaoEntities())
                {
                    if (myFederacaoEntities.USUARIO.Any(x => x.USUA_EMAIL.ToLower().Trim().Equals(email) && (!idPessoa.HasValue || x.USUA_PK_FK_PESS != idPessoa.Value)))
                    {
                        txtBox.Text = string.Empty;
                        Ajax.JavascriptAlert(uPanel, "Este endereço de e-mail já esta sendo utilizado para outro login.");
                        txtBox.Focus();
                    }
                }
            }
        }

        private Boolean emailValido(String strEmail)
        {
            CadastroMasks();
            try
            { MailAddress myMailAddress = new MailAddress(strEmail); }
            catch (Exception ex)
            {
                Log.Logar(ex);
                return false;
            }

            Regex myRegex = new Regex("\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*");
            return myRegex.IsMatch(strEmail);
        }

        private void verificaPermissaoVisualizarTabs()
        {
            bool _contato,
                _documento,
                _responsavel,
                _financeiro,
                _historicoEmail,
                _historicoSMS,
                _dadosMedicos = false;

            _historicoSMS = true;
            switch (Session["PESSOA#TipoFiltro"].ToString())
            {
                case PESSOA_TIPO_FILTRO.ASSOCIACAO:
                    _contato = Utilitarios.UsuarioLogado.VerificaPermissao(29.6);
                    _documento = Utilitarios.UsuarioLogado.VerificaPermissao(29.7);
                    _responsavel = Utilitarios.UsuarioLogado.VerificaPermissao(29.8);
                    _financeiro = Utilitarios.UsuarioLogado.VerificaPermissao(29.9);
                    _historicoEmail = Utilitarios.UsuarioLogado.VerificaPermissao(29.11);
                    _dadosMedicos = false;
                    break;
                case PESSOA_TIPO_FILTRO.COMPETIDOR:
                    _contato = Utilitarios.UsuarioLogado.VerificaPermissao(21.21);
                    _documento = Utilitarios.UsuarioLogado.VerificaPermissao(21.22);
                    _responsavel = Utilitarios.UsuarioLogado.VerificaPermissao(21.23);
                    _financeiro = Utilitarios.UsuarioLogado.VerificaPermissao(21.24);
                    _historicoEmail = Utilitarios.UsuarioLogado.VerificaPermissao(21.25);
                    _dadosMedicos = Utilitarios.UsuarioLogado.VerificaPermissao(21.34);
                    break;
                case PESSOA_TIPO_FILTRO.EMPRESA:
                    _contato = Utilitarios.UsuarioLogado.VerificaPermissao(30.6);
                    _documento = Utilitarios.UsuarioLogado.VerificaPermissao(30.7);
                    _responsavel = Utilitarios.UsuarioLogado.VerificaPermissao(30.8);
                    _financeiro = Utilitarios.UsuarioLogado.VerificaPermissao(30.9);
                    _historicoEmail = Utilitarios.UsuarioLogado.VerificaPermissao(30.11);
                    _dadosMedicos = false;
                    break;
                case PESSOA_TIPO_FILTRO.CONFEDERACAO:
                    _contato = Utilitarios.UsuarioLogado.VerificaPermissao(59.6);
                    _documento = Utilitarios.UsuarioLogado.VerificaPermissao(59.7);
                    _responsavel = Utilitarios.UsuarioLogado.VerificaPermissao(59.8);
                    _financeiro = Utilitarios.UsuarioLogado.VerificaPermissao(59.9);
                    _historicoEmail = Utilitarios.UsuarioLogado.VerificaPermissao(59.11);
                    _dadosMedicos = false;
                    break;
                case PESSOA_TIPO_FILTRO.ENTIDADE:
                    _contato = Utilitarios.UsuarioLogado.VerificaPermissao(22.12);
                    _documento = Utilitarios.UsuarioLogado.VerificaPermissao(22.13);
                    _responsavel = Utilitarios.UsuarioLogado.VerificaPermissao(22.14);
                    _financeiro = Utilitarios.UsuarioLogado.VerificaPermissao(22.15);
                    _historicoEmail = Utilitarios.UsuarioLogado.VerificaPermissao(22.16);
                    _dadosMedicos = false;
                    break;
                case PESSOA_TIPO_FILTRO.FEDERACAO_HIPISMO:
                    _contato = Utilitarios.UsuarioLogado.VerificaPermissao(23.6);
                    _documento = Utilitarios.UsuarioLogado.VerificaPermissao(23.7);
                    _responsavel = Utilitarios.UsuarioLogado.VerificaPermissao(23.8);
                    _financeiro = Utilitarios.UsuarioLogado.VerificaPermissao(23.9);
                    _historicoEmail = Utilitarios.UsuarioLogado.VerificaPermissao(23.11);
                    _dadosMedicos = false;
                    break;
                case PESSOA_TIPO_FILTRO.HOSPITAL:
                    _contato = true;
                    _documento = true;
                    _responsavel = false;
                    _financeiro = false;
                    _historicoEmail = false;
                    _dadosMedicos = false;
                    break;
                case PESSOA_TIPO_FILTRO.OFICIAL:
                    _contato = Utilitarios.UsuarioLogado.VerificaPermissao(24.6);
                    _documento = Utilitarios.UsuarioLogado.VerificaPermissao(24.7);
                    _responsavel = Utilitarios.UsuarioLogado.VerificaPermissao(24.8);
                    _financeiro = Utilitarios.UsuarioLogado.VerificaPermissao(24.9);
                    _historicoEmail = Utilitarios.UsuarioLogado.VerificaPermissao(24.11);
                    _dadosMedicos = Utilitarios.UsuarioLogado.VerificaPermissao(24.13);
                    break;
                case PESSOA_TIPO_FILTRO.PROPRIETARIO:
                    _contato = Utilitarios.UsuarioLogado.VerificaPermissao(25.6);
                    _documento = Utilitarios.UsuarioLogado.VerificaPermissao(25.7);
                    _responsavel = Utilitarios.UsuarioLogado.VerificaPermissao(25.8);
                    _financeiro = Utilitarios.UsuarioLogado.VerificaPermissao(25.9);
                    _historicoEmail = Utilitarios.UsuarioLogado.VerificaPermissao(25.11);
                    _dadosMedicos = Utilitarios.UsuarioLogado.VerificaPermissao(25.14);
                    break;
                case PESSOA_TIPO_FILTRO.RESPONSAVEL:
                    _contato = Utilitarios.UsuarioLogado.VerificaPermissao(26.6);
                    _documento = Utilitarios.UsuarioLogado.VerificaPermissao(26.7);
                    _responsavel = Utilitarios.UsuarioLogado.VerificaPermissao(26.8);
                    _financeiro = Utilitarios.UsuarioLogado.VerificaPermissao(26.9);
                    _historicoEmail = Utilitarios.UsuarioLogado.VerificaPermissao(26.11);
                    _dadosMedicos = Utilitarios.UsuarioLogado.VerificaPermissao(26.15);
                    break;
                case PESSOA_TIPO_FILTRO.STAFF:
                    _contato = Utilitarios.UsuarioLogado.VerificaPermissao(27.6);
                    _documento = Utilitarios.UsuarioLogado.VerificaPermissao(27.7);
                    _responsavel = Utilitarios.UsuarioLogado.VerificaPermissao(27.8);
                    _financeiro = Utilitarios.UsuarioLogado.VerificaPermissao(27.9);
                    _historicoEmail = Utilitarios.UsuarioLogado.VerificaPermissao(27.11);
                    _dadosMedicos = Utilitarios.UsuarioLogado.VerificaPermissao(27.13);
                    break;
                case PESSOA_TIPO_FILTRO.INSTRUTOR:
                    _contato = Utilitarios.UsuarioLogado.VerificaPermissao(62.6);
                    _documento = Utilitarios.UsuarioLogado.VerificaPermissao(62.7);
                    _responsavel = Utilitarios.UsuarioLogado.VerificaPermissao(62.8);
                    _financeiro = Utilitarios.UsuarioLogado.VerificaPermissao(62.9);
                    _historicoEmail = Utilitarios.UsuarioLogado.VerificaPermissao(62.11);
                    _dadosMedicos = Utilitarios.UsuarioLogado.VerificaPermissao(62.12);
                    break;
                case PESSOA_TIPO_FILTRO.VETERINARIO:
                    _contato = Utilitarios.UsuarioLogado.VerificaPermissao(28.6);
                    _documento = Utilitarios.UsuarioLogado.VerificaPermissao(28.7);
                    _responsavel = Utilitarios.UsuarioLogado.VerificaPermissao(28.8);
                    _financeiro = Utilitarios.UsuarioLogado.VerificaPermissao(28.9);
                    _historicoEmail = Utilitarios.UsuarioLogado.VerificaPermissao(28.11);
                    _dadosMedicos = Utilitarios.UsuarioLogado.VerificaPermissao(28.14);
                    break;

                default:
                    _contato =
                    _documento =
                    _responsavel =
                    _financeiro =
                    _historicoEmail =
                    _dadosMedicos = true;
                    break;
            }

            phContato.Visible =
            TabContato.Visible = _contato;

            phDocumento.Visible =
            TabDocumento.Visible = _documento;

            phResponsavel.Visible =
            TabResponsavel.Visible = _responsavel;

            phFinanceiro.Visible =
            TabFinanceiro.Visible = _financeiro;

            phHistoricoEmail.Visible =
            TabHistoricoEmail.Visible = _historicoEmail;

            phHistoricoSMS.Visible =
            TabHistoricoSMS.Visible = _historicoSMS;

            phDadosMedicos.Visible =
            TabDadosMedicos.Visible = _dadosMedicos;
        }

        #endregion

        #region WebCam
        protected void btnRecuperaFotoWebCam_Click(object sender, EventArgs e)
        {
            var path = String.Format("~/uploads/pessoa/temp/{0}/", Session.SessionID);
            var lastFile = IO.ListaArquivos(path).Where(x => new FileInfo(x).Name.StartsWith("webcam_")).OrderByDescending(x => x).FirstOrDefault();

            if (lastFile != null)
            {
                var lastFileInfo = new FileInfo(lastFile);

                if (lastFileInfo.Name.StartsWith("webcam_"))
                {
                    if (pathFoto == null)
                        pathFoto = path + lastFileInfo.Name;
                    else
                    {
                        var pathFotoInfo = new FileInfo(Server.MapPath(pathFoto));
                        if (pathFotoInfo.Name != lastFileInfo.Name)
                        {
                            string[] arrNomes = { pathFotoInfo.Name, lastFileInfo.Name };
                            if (arrNomes.OrderByDescending(x => x).FirstOrDefault() == lastFileInfo.Name)
                                pathFoto = path + lastFileInfo.Name;
                        }
                    }
                    btnForceImgFotoBind_Click(null, EventArgs.Empty);
                }
            }


        }
        #endregion

        #region Métodos para upload de logotipo - pessoa jurídica
        protected void btnForceImgLogotipoBind_Click(object sender, EventArgs e)
        {
            imgLogotipo.ImageUrl = pathLogotipo ?? "~/assets/img/semImagem.jpg";
            imgLogotipo.DataBind();
            upImagemLogotipo.Update();
        }
        protected void lkbRemoverLogotipo_Click(object sender, EventArgs e)
        {
            pathLogotipo = null;
            btnForceImgLogotipoBind_Click(null, EventArgs.Empty);
        }

        protected void afuLogotipo_UploadedComplete(object sender, AjaxControlToolkit.AsyncFileUploadEventArgs e)
        {
            string[] extensoes = { "png", "jpg", "jpeg", "gif" };
            if (e.State == AjaxControlToolkit.AsyncFileUploadState.Success)
            {
                var nomeArquivo = e.FileName.Split('\\').Last();
                var extensao = nomeArquivo.Split('.').LastOrDefault();
                if (extensoes.Any(x => x == extensao.ToLower()))
                {
                    var path = Server.MapPath("~/uploads/pessoa/temp/");
                    if (!Directory.Exists(path))
                        Directory.CreateDirectory(path);

                    pathLogotipo = string.Format("~/uploads/pessoa/temp/{0}", nomeArquivo);

                    afuLogotipo.SaveAs(path + nomeArquivo);
                }
                else
                    Ajax.JavascriptAlert(this, "Arquivo inválido!");
            }
            else
                Ajax.JavascriptAlert(this, "Arquivo inválido!");
        }
        #endregion

        #region Métodos para upload de foto - pessoa física
        protected void btnForceImgFotoBind_Click(object sender, EventArgs e)
        {
            imgFoto.ImageUrl = pathFoto ?? "~/assets/img/semImagem.jpg";
            imgFoto.DataBind();
            upImagemFoto.Update();
        }
        protected void lkbRemoverFoto_Click(object sender, EventArgs e)
        {
            pathFoto = null;
            btnForceImgFotoBind_Click(null, EventArgs.Empty);
        }
        protected void afuFoto_UploadedComplete(object sender, AjaxControlToolkit.AsyncFileUploadEventArgs e)
        {
            string[] extensoes = { "jpg", "jpeg" };
            if (e.State == AjaxControlToolkit.AsyncFileUploadState.Success)
            {
                var nomeArquivo = e.FileName.Split('\\').Last();
                var extensao = nomeArquivo.Split('.').LastOrDefault();
                if (extensoes.Any(x => x == extensao.ToLower()))
                {
                    var path = Server.MapPath(String.Format("~/uploads/pessoa/temp/{0}/", Session.SessionID));
                    if (!Directory.Exists(path))
                        Directory.CreateDirectory(path);

                    pathFoto = String.Format("~/uploads/pessoa/temp/{0}/{1}", Session.SessionID, nomeArquivo);
                    afuFoto.SaveAs(path + nomeArquivo);
                    afuFoto.ClearAllFilesFromPersistedStore();
                    afuFoto.Dispose();
                }
                else
                    Ajax.JavascriptAlert(this, "Arquivo inválido! Utilize somente arquivos '.jpg'.");
            }
            else
                Ajax.JavascriptAlert(this, "Arquivo inválido!");
        }
        #endregion

        #region SALVAR_MASTER
        public int salva_master(bool validaNacionalidade = false, bool validaFederacao = false)
        {

            if (TabDocumento.Visible)
            {
                if (txtCPFnum.Text.Length > 0)
                    if (!Validacoes.ValidaCPF(txtCPFnum.Text))
                        throw new Exception("O CPF digitado é inválido, favor verificar.");
            }
            else
                txtCPFnum.Text = txtRGnum.Text = string.Empty;

            Pessoa = null;

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                var _isInsert = idPessoa == 0;
                if (_isInsert)
                {
                    Pessoa = new PESSOA();
                    ctx.PESSOA.AddObject(Pessoa);
                }
                else
                {
                    Pessoa = ctx.PESSOA.FirstOrDefault(p => p.PESS_PK_ID == idPessoa);
                    //ctx.Attach<PESSOA>(Pessoa);
                }

                if (int.TryParse(ddlCategFinan.SelectedValue, out int categFinanID))
                    Pessoa.CATEGORIA_FINANCEIRO = ctx.CATEGORIA_FINANCEIRO.FirstOrDefault(x => x.CAFI_PK_ID == categFinanID);
                else
                    Pessoa.CATEGORIA_FINANCEIRO = null;

                switch (hfTipoPessoa.Value)
                {
                    case "F":
                        //status: 0 = ativo ; 1 = inativo ; 2 = sob aprovacação ; 3 = bloqueado
                        if (_isInsert)
                            Pessoa.PESS_DATA_HORA_CADASTRO = DateTime.Now;
                        Pessoa.PESS_STATUS = Convert.ToByte(ddlStatus.SelectedValue);
                        Pessoa.PESS_NEWSLETTER = cbNewsLet.Checked;
                        Pessoa.PESS_OBSERVACAO = stringNula(txtObserv.Text);

                        if (cbCriarUsuario.Checked)
                        {
                            bool primeiroAcesso = false;
                            if (Pessoa.USUARIO == null)
                            {
                                Pessoa.USUARIO = new USUARIO();
                                primeiroAcesso = true;
                            }

                            string novaSenha = "";
                            if (string.IsNullOrWhiteSpace(txtSenha.Text) && string.IsNullOrWhiteSpace(Pessoa.USUARIO.USUA_SENHA))
                                throw new Exception("Você deve preencher o campo senha.");
                            else if (!string.IsNullOrWhiteSpace(txtSenha.Text))
                                novaSenha = new Criptografia().Criptografar(txtSenha.Text);

                            if (!string.IsNullOrWhiteSpace(novaSenha) && novaSenha != Pessoa.USUARIO.USUA_SENHA)
                                Pessoa.USUARIO.USUA_SENHA = new Criptografia().Criptografar(txtSenha.Text);

                            if (!string.IsNullOrWhiteSpace(txtEmailLogin.Text) && ctx.USUARIO.Any(x => x.USUA_EMAIL == txtEmailLogin.Text && x.USUA_PK_FK_PESS != Pessoa.PESS_PK_ID))
                                throw new Exception("O e-mail informado já está sendo usado por outra pessoa, favor informar um e-mail diferente.");

                            if (Pessoa.USUARIO.USUA_EMAIL != txtEmailLogin.Text)
                            {
                                Pessoa.USUARIO.USUA_EMAIL = txtEmailLogin.Text;
                                primeiroAcesso = true;
                            }

                            var redefinir = Convert.ToInt32(ddlRedefinirLogin.SelectedValue) > 0;
                            if (Pessoa.USUARIO.USUA_REDEFINIR != redefinir)
                            {
                                Pessoa.USUARIO.USUA_REDEFINIR = redefinir;
                                primeiroAcesso = true;
                            }

                            if (ddlGrupoUsuario.SelectedValue != string.Empty)
                            {
                                var IDGrupoUsuario = Convert.ToInt32(ddlGrupoUsuario.SelectedValue);
                                var gusu = ctx.GRUPO_USUARIO.FirstOrDefault(x => x.GRUS_PK_ID == IDGrupoUsuario);

                                if (Pessoa.USUARIO.GRUPO_USUARIO != gusu)
                                {
                                    Pessoa.USUARIO.GRUPO_USUARIO = gusu;
                                    primeiroAcesso = true;
                                }
                            }

                            if (ddlEntidadeLogin.SelectedValue != string.Empty)
                            {
                                var IDEntidade = Convert.ToInt32(ddlEntidadeLogin.SelectedValue);
                                var entidade = ctx.ENTIDADE.FirstOrDefault(x => x.PESSOA_JURIDICA.PESSOA.PESS_PK_ID == IDEntidade);

                                if (Pessoa.USUARIO.ENTIDADE != entidade)
                                {
                                    Pessoa.USUARIO.ENTIDADE = entidade;
                                    primeiroAcesso = true;
                                }
                            }

                            if (primeiroAcesso)
                            {
                                EnviaEmail mail = new EnviaEmail(Utilitarios.FederacaoPadrao.PESS_NOME, WebConfigurationManager.AppSettings["emailContato"], "Cadastro aprovado", "");

                                var scheme = HttpContext.Current.Request.Url.GetComponents(UriComponents.Scheme, UriFormat.UriEscaped);
                                var url = HttpContext.Current.Request.Url.GetComponents(UriComponents.Host, UriFormat.UriEscaped).Replace("/", "");
                                var port = url == "localhost" || url == "prodweb2" || url.Contains("ic-webapp2") ? ":" + HttpContext.Current.Request.Url.Port : "";

                                var urlStr = string.Format("{0}://{1}{2}", scheme, url, port);

                                mail.Mensagem = string.Format(File.ReadAllText(Server.MapPath("~/email/primeiroAcesso.htm")),
                                                                urlStr,
                                                                Pessoa.PESS_NOME,
                                                                Pessoa.USUARIO.USUA_EMAIL,
                                                                "-",
                                                                txtSenha.Text,
                                                                Utilitarios.FederacaoPadrao.PESS_APELIDO,
                                                                Utilitarios.FederacaoPadrao.PESS_NOME,
                                                                Utilitarios.PastaTemaCliente,
                                                                Utilitarios.FederacaoPadrao.EmailFaleConosco,
                                                                Utilitarios.FederacaoPadrao.Telefones,
                                                                DateTime.Today.Year.ToString());

                                mail.EnviaEMAILBOX(Pessoa.PESS_NOME, Pessoa.USUARIO.USUA_EMAIL);
                            }
                        }
                        else if (Pessoa.USUARIO != null)
                            Pessoa.USUARIO = null;


                        PESSOA_FISICA pfis;
                        PESSOA_FISICA_DADOS_MEDICOS dadosMedicos;
                        if (_isInsert)
                        {
                            pfis = new PESSOA_FISICA();
                            dadosMedicos = new PESSOA_FISICA_DADOS_MEDICOS();

                            ctx.PESSOA_FISICA_DADOS_MEDICOS.AddObject(dadosMedicos);
                            pfis.PESSOA_FISICA_DADOS_MEDICOS = dadosMedicos;
                            ctx.PESSOA_FISICA.AddObject(pfis);
                        }
                        else
                        {
                            pfis = ctx.PESSOA_FISICA.SingleOrDefault(p => p.PESSOA.PESS_PK_ID == idPessoa);
                            if (pfis.PESSOA_FISICA_DADOS_MEDICOS == null)
                            {
                                dadosMedicos = new PESSOA_FISICA_DADOS_MEDICOS();
                                pfis.PESSOA_FISICA_DADOS_MEDICOS = dadosMedicos;
                            }
                            //ctx.Attach<PESSOA_FISICA>(pfis);
                        }

                        var cpfNum = txtCPFnum.Text.Replace(".", "").Replace("-", "");

                        pfis.PEFI_CNH_CATEGORIA = (!String.IsNullOrEmpty(ddlCNHcat.SelectedValue) ? ddlCNHcat.SelectedValue : null);
                        pfis.PEFI_CNH_DATA_EXPEDICAO = DateTimeNulo(txtCNHexp.Text);
                        pfis.PEFI_CNH_DATA_VALIDADE = DateTimeNulo(txtCNHvali.Text);
                        pfis.PEFI_CNH_NUM = stringNula(txtCNHnum.Text);
                        pfis.PEFI_CPF_DATA_EXPEDICAO = DateTimeNulo(txtCPFexp.Text);
                        pfis.PEFI_CPF_NUM = string.IsNullOrEmpty(cpfNum) ? null : (Validacoes.ValidaCPF(cpfNum) ? cpfNum : null);
                        pfis.PEFI_CTPS_DATA_EXPEDICAO = DateTimeNulo(txtCTPSexp.Text);
                        pfis.PEFI_CTPS_NUM = stringNula(txtCTPSnum.Text);
                        pfis.PEFI_CTPS_SERIE = stringNula(txtCTPSser.Text);
                        pfis.PEFI_CTPS_UF = stringNula(ddlCTPSUF.SelectedValue);
                        pfis.PEFI_NASC_DATA_HORA = DateTimeNulo(txtNasc.Text);
                        pfis.PEFI_PESPASEP_DATA_EXPEDICAO = DateTimeNulo(txtPISPexp.Text);
                        pfis.PEFI_PISPASEP_ANO = intNulo(txtPISPano.Text);
                        pfis.PEFI_PISPASEP_NUM = stringNula(txtPISPnum.Text);
                        pfis.PEFI_RG_DATA_EXPEDICAO = DateTimeNulo(txtRGExp.Text);
                        pfis.PEFI_RG_NUM = stringNula(txtRGnum.Text);
                        pfis.PEFI_RG_ORGAO = stringNula(txtRGorg.Text);
                        pfis.PEFI_RG_UF = stringNula(ddlRGUF.SelectedValue);
                        pfis.PEFI_SEXO = ddlSexo.SelectedValue;
                        pfis.PEFI_TITULO_ELEITOR_DATA_EXPEDICAO = DateTimeNulo(txtTEexp.Text);
                        pfis.PEFI_TITULO_ELEITOR_NUM = stringNula(txtTEnum.Text);
                        pfis.PEFI_TITULO_ELEITOR_SECAO = intNulo(txtTEsecao.Text);
                        pfis.PEFI_TITULO_ELEITOR_ZONA = intNulo(txtTEzona.Text);
                        pfis.PEFI_TRATAMENTO = stringNula(txtTratamento.Text);
                        pfis.PEFI_PASSAPORTE_NUM = txtPassaporteNum.Text;
                        #region TAB DADOS MEDICOS
                        double? peso = null;
                        if (!String.IsNullOrEmpty(txtPeso_DM.Text))
                        {
                            try { peso = Convert.ToUInt64(txtPeso_DM.Text.Replace(".", ",")); }
                            catch (Exception) { throw new Exception("Você deve preencher apenas números no campo 'Peso (Em Kg)'."); }
                        }
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_PESO = peso;

                        double? altura = null;
                        if (!String.IsNullOrEmpty(txtAltura_DM.Text))
                        {
                            try { altura = Convert.ToDouble(txtAltura_DM.Text.Replace(".", ",")); }
                            catch (Exception) { throw new Exception("Você deve preencher apenas números no campo 'Altura (Em m)'."); }
                        }
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_ALTURA = altura;

                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_TIPO_SANGUINEO = txtTipoSangue_DM.Text;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_PRIMEIROS_SOCORROS = ckPrimeirosSocorros_DM.Checked == true ? true : false;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_ENCAMINHA_HOSPITAL = ckHospitalRegiao_DM.Checked == true ? true : false;

                        if (!String.IsNullOrEmpty(ddlConvenio_DM.SelectedValue))
                        {
                            var idConvenio = Convert.ToInt32(ddlConvenio_DM.SelectedValue);
                            pfis.PESSOA_FISICA_DADOS_MEDICOS.CONVENIO = ctx.CONVENIO.FirstOrDefault(x => x.CONV_PK_ID == idConvenio);
                        }

                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_NUM_CONVENIO = txtNumero_DM.Text;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_TEL_CONVENIO = txtTelefone_DM.Text;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_OBSERVACAO = txtObsGerais_DM.Text;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_HIST_MED_CIRUR = txtHistorico_DM.Text;

                        #region RadionButton Doenças
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_DIST_VISUAL = rbDisturbiosVisuais_Sim.Checked == true ? true : false;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_DIST_AUDITIVO = rbDisturbiosAuditivos_Sim.Checked == true ? true : false;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_TABAGISMO = rbTabagismo_Sim.Checked == true ? true : false;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_PROBL_RESPIRAT = rbProblemasRespira_Sim.Checked == true ? true : false;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_SINUSITE = rbSinusite_Sim.Checked == true ? true : false;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_RINITE = rbRinite_Sim.Checked == true ? true : false;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_PROBL_CARDIACOS = rbProblemaCardio_Sim.Checked == true ? true : false;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_ARRITMIA = rbArritimia_Sim.Checked == true ? true : false;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_DIABETICO = rbDiabetico_Sim.Checked == true ? true : false;
                        pfis.PESSOA_FISICA_DADOS_MEDICOS.PFDM_HIPERTENSO = rbHipertenso_Sim.Checked == true ? true : false;
                        #endregion
                        #endregion

                        NACIONALIDADE nacio;
                        NACIONALIDADE nacio1;
                        int selected;

                        if (!String.IsNullOrWhiteSpace(ddlNacio.SelectedItem.Value))
                        {
                            selected = Convert.ToInt32(ddlNacio.SelectedItem.Value);
                            nacio = ctx.NACIONALIDADE.FirstOrDefault(p => p.NACI_PK_ID == selected);
                            pfis.NACIONALIDADE = nacio;
                        }
                        else
                        {
                            if (pfis.CAVALEIRO != null && validaNacionalidade)
                                throw new Exception("Você deve preencher o campo 'País de Origem'.");

                            pfis.NACIONALIDADE = null;
                        }

                        //if (ddlNacio.SelectedItem.Text == "BRASIL" && String.IsNullOrWhiteSpace(ddlFedRepr.SelectedValue) && validaFederacao)
                        //{
                        //    ddlNacio.Focus();
                        //    throw new Exception("Você deve preencher o campo 'Federação que Representa'.");
                        //}
                        //else
                        //{
                        if (!String.IsNullOrWhiteSpace(ddlFedRepr.SelectedValue))
                        {
                            int idfed = Convert.ToInt32(ddlFedRepr.SelectedValue);
                            PESSOA_JURIDICA fedrepr = ctx.PESSOA_JURIDICA.FirstOrDefault(p => p.PEJU_PK_FK_PESS == idfed);
                            if (fedrepr != null)
                                Pessoa.PESSOA_JURIDICAPai = fedrepr;
                        }
                        else
                        {
                            Pessoa.PESSOA_JURIDICAPai = null;
                        }
                        //}

                        if (!String.IsNullOrWhiteSpace(ddlPassaportePais.SelectedValue))
                        {
                            selected = Convert.ToInt32(ddlPassaportePais.SelectedItem.Value);
                            nacio1 = ctx.NACIONALIDADE.SingleOrDefault(p => p.NACI_PK_ID == selected);
                            //ctx.Attach<NACIONALIDADE>(nacio1);
                            pfis.NACIONALIDADEPASSAPORTE = nacio1;
                        }
                        else
                            pfis.NACIONALIDADEPASSAPORTE = null;


                        pfis.PEFI_ASSINATURA = afuAssinatura.FileBytes;


                        Pessoa.PESSOA_FISICA = pfis;

                        Pessoa.PESS_TIPO = "F";
                        break;

                    case "J":
                        //status: 0 = ativo ; 1 = inativo ; 2 = sob aprovacação ; 3 = bloqueado
                        if (_isInsert)
                            Pessoa.PESS_DATA_HORA_CADASTRO = DateTime.Now;
                        Pessoa.PESS_STATUS = Convert.ToByte(ddlStatusJur.SelectedValue);
                        Pessoa.PESS_OBSERVACAO = stringNula(txtObsJur.Text);
                        Pessoa.PESS_IMAGEM = afuLogotipo.FileBytes;


                        if (!String.IsNullOrEmpty(txtTwitter.Text) && !this.URLValida(txtTwitter.Text))
                            throw new Exception("A URL do Twitter não é valida.");
                        if (!String.IsNullOrEmpty(txtFacebook.Text) && !this.URLValida(txtFacebook.Text))
                            throw new Exception("A URL do Facebook não é valida.");

                        if (cbCriarUsuarioJur.Checked)
                        {
                            bool primeiroAcesso = false;
                            if (Pessoa.USUARIO == null)
                            {
                                Pessoa.USUARIO = new USUARIO();
                                primeiroAcesso = true;
                            }

                            if (String.IsNullOrWhiteSpace(txtSenhaJur.Text) && String.IsNullOrWhiteSpace(Pessoa.USUARIO.USUA_SENHA))
                                throw new Exception("Você deve preencher o campo senha.");
                            else
                                Pessoa.USUARIO.USUA_SENHA = new Criptografia().Criptografar(txtSenhaJur.Text);

                            Pessoa.USUARIO.USUA_EMAIL = txtEmailLoginJur.Text;
                            Pessoa.USUARIO.USUA_REDEFINIR = Convert.ToInt32(ddlRedefinirLoginJur.SelectedValue) > 0;

                            if (!String.IsNullOrWhiteSpace(ddlGrupoUsuarioJur.SelectedValue))
                            {
                                var IDGrupoUsuario = Convert.ToInt32(ddlGrupoUsuarioJur.SelectedValue);
                                var gusu = ctx.GRUPO_USUARIO.FirstOrDefault(x => x.GRUS_PK_ID == IDGrupoUsuario);
                                Pessoa.USUARIO.GRUPO_USUARIO = gusu;
                            }
                            if (!String.IsNullOrWhiteSpace(ddlEntidadeLoginJur.SelectedValue))
                            {
                                var IDEntidade = Convert.ToInt32(ddlEntidadeLoginJur.SelectedValue);
                                var entidade = ctx.ENTIDADE.FirstOrDefault(x => x.PESSOA_JURIDICA.PESSOA.PESS_PK_ID == IDEntidade);

                                Pessoa.USUARIO.ENTIDADE = entidade;
                            }

                            if (primeiroAcesso)
                            {
                                EnviaEmail mail = new EnviaEmail(Utilitarios.FederacaoPadrao.PESS_NOME, WebConfigurationManager.AppSettings["emailContato"], "Cadastro aprovado", "");

                                var scheme = HttpContext.Current.Request.Url.GetComponents(UriComponents.Scheme, UriFormat.UriEscaped);
                                var url = HttpContext.Current.Request.Url.GetComponents(UriComponents.Host, UriFormat.UriEscaped).Replace("/", "");
                                var port = url == "localhost" || url == "prodweb2" || url.Contains("ic-webapp2") ? ":" + HttpContext.Current.Request.Url.Port : "";

                                var urlStr = string.Format("{0}://{1}{2}", scheme, url, port);

                                mail.Mensagem = string.Format(File.ReadAllText(Server.MapPath("~/email/primeiroAcesso.htm")),
                                                                urlStr,
                                                                Pessoa.PESS_NOME,
                                                                Pessoa.USUARIO.USUA_EMAIL,
                                                                "-",
                                                                txtSenha.Text,
                                                                Utilitarios.FederacaoPadrao.PESS_APELIDO,
                                                                Utilitarios.FederacaoPadrao.PESS_NOME,
                                                                Utilitarios.PastaTemaCliente,
                                                                Utilitarios.FederacaoPadrao.EmailFaleConosco,
                                                                Utilitarios.FederacaoPadrao.Telefones,
                                                                DateTime.Today.Year.ToString());

                                mail.EnviaEMAILBOX(Pessoa.PESS_NOME, Pessoa.USUARIO.USUA_EMAIL);
                            }
                        }
                        else if (Pessoa.USUARIO != null)
                            Pessoa.USUARIO = null;

                        PESSOA_JURIDICA pjur;

                        if (_isInsert)
                        {
                            pjur = new PESSOA_JURIDICA();
                            ctx.PESSOA_JURIDICA.AddObject(pjur);
                        }
                        else
                        {
                            pjur = ctx.PESSOA_JURIDICA.FirstOrDefault(p => p.PESSOA.PESS_PK_ID == idPessoa);
                            //ctx.Attach<PESSOA_JURIDICA>(pjur);
                        }

                        var cnpjNum = txtCNPJ.Text.Replace(".", "").Replace("-", "").Replace("/", "");

                        pjur.PEJU_CNPJ_NUM = stringNula(cnpjNum);
                        pjur.PEJU_IE_NUM = stringNula(txtInscEst.Text);
                        pjur.PEJU_SITE = txtHomePage.Text;
                        pjur.PEJU_FACEBOOK = txtFacebook.Text;
                        pjur.PEJU_TWITTER = txtTwitter.Text;

                        if (!String.IsNullOrWhiteSpace(txtDataFundacao.Text))
                            pjur.PEJU_DATA_FUNDACAO = Convert.ToDateTime(txtDataFundacao.Text);
                        else
                            pjur.PEJU_DATA_FUNDACAO = null;

                        if (!String.IsNullOrWhiteSpace(ddlPaisJudiciario.SelectedItem.Value))
                        {
                            selected = Convert.ToInt32(ddlPaisJudiciario.SelectedItem.Value);
                            nacio = ctx.NACIONALIDADE.FirstOrDefault(p => p.NACI_PK_ID == selected);
                            pjur.NACIONALIDADE = nacio;

                            if (ddlPaisJudiciario.SelectedItem.Value == "1")
                            {
                                pjur.PEJU_UF = ddlEstados.SelectedValue;
                            }
                            else
                                pjur.PEJU_UF = null;
                        }
                        else
                        {
                            pjur.NACIONALIDADE = null;
                            pjur.PEJU_UF = null;
                        }

                        int idpres;
                        if (!string.IsNullOrEmpty(hfIDpres.Value))
                        {
                            idpres = Convert.ToInt32(hfIDpres.Value);
                            var myPresidente = ctx.PESSOA_FISICA.SingleOrDefault(p => p.PEFI_PK_FK_PESS == idpres);
                            if (myPresidente != null)
                            {
                                //ctx.Attach<PESSOA_FISICA>(myPresidente);
                                pjur.PESSOA_FISICAPresidente = myPresidente;
                            }
                        }
                        else
                            pjur.PESSOA_FISICAPresidente = null;

                        if (!string.IsNullOrEmpty(hfIDvicepres.Value))
                        {
                            idpres = Convert.ToInt32(hfIDvicepres.Value);
                            var myVicePresidente = ctx.PESSOA_FISICA.SingleOrDefault(p => p.PEFI_PK_FK_PESS == idpres);
                            if (myVicePresidente != null)
                            {
                                //ctx.Attach<PESSOA_FISICA>(myVicePresidente);
                                pjur.PESSOA_FISICAVicePresidente = myVicePresidente;
                            }
                        }
                        else
                            pjur.PESSOA_FISICAVicePresidente = null;

                        Pessoa.PESSOA_JURIDICA = pjur;
                        Pessoa.PESS_TIPO = "J";
                        break;
                }
                ctx.SaveChanges();
                //nome--
                if (idPessoa == 0)
                {
                    if (ListaPesNom.Count() > 0)
                    {
                        foreach (var item in ListaPesNom)
                            ctx.AddToPESSOA_NOME(
                                new PESSOA_NOME()
                                {
                                    PENO_NOME = item.PENO_NOME,
                                    PENO_APELIDO = item.PENO_APELIDO,
                                    PENO_NOME_FANTASIA = item.PENO_NOME_FANTASIA,
                                    PENO_EXIBIR_NOME = item.PENO_EXIBIR_NOME,
                                    PENO_DATA_INI = item.PENO_DATA_INI,
                                    PENO_DATA_FIM = item.PENO_DATA_FIM,
                                    PESSOA = Pessoa
                                }
                            );
                    }
                    else
                        throw new Exception("Você deve cadastrar pelo menos um nome.");
                }
                else
                {
                    var cavaleiro = ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == idPessoa);
                    if (cavaleiro.PESS_NOME.Count() < 1)
                        throw new Exception("Você deve cadastrar pelo menos um nome.");
                }
                //-------

                //email--
                foreach (var item in ListaPesEmail)
                    ctx.AddToPESSOA_EMAIL(
                        new PESSOA_EMAIL()
                        {
                            PEEM_TIPO = item.PEEM_TIPO,
                            PEEM_EMAIL = item.PEEM_EMAIL,
                            PESSOA = Pessoa
                        }
                    );
                //-------

                //endereço--
                foreach (var item in ListaPesEnd)
                {
                    var peen = new PESSOA_ENDERECO()
                    {
                        PEEN_CEP = item.PEEN_CEP,
                        PEEN_CIDADE = item.PEEN_CIDADE,
                        PEEN_BAIRRO = item.PEEN_BAIRRO,
                        PEEN_COMPLEMENTO = item.PEEN_COMPLEMENTO,
                        PEEN_ENDERECO = item.PEEN_ENDERECO,
                        PEEN_ESTADO = item.PEEN_ESTADO,
                        PEEN_NUMERO = item.PEEN_NUMERO,
                        PEEN_OBSERVACAO = item.PEEN_OBSERVACAO,
                        PEEN_PRINCIPAL = item.PEEN_PRINCIPAL,
                        PEEN_TIPO = item.PEEN_TIPO,
                        PESSOA = Pessoa
                    };

                    if (item.NACIONALIDADE != null)
                        peen.NACIONALIDADE = ctx.NACIONALIDADE.FirstOrDefault(x => x.NACI_PK_ID == item.NACIONALIDADE.NACI_PK_ID);
                    if (item.MUNICIPIO != null)
                        peen.MUNICIPIO = ctx.MUNICIPIO.FirstOrDefault(x => x.MUNI_PK_ID == item.MUNICIPIO.MUNI_PK_ID);
                    if (item.BAIRRO != null)
                        peen.BAIRRO = ctx.BAIRRO.FirstOrDefault(x => x.BAIR_PK_ID == item.BAIRRO.BAIR_PK_ID);

                    ctx.AddToPESSOA_ENDERECO(peen);
                }
                //---------

                //telefone--
                foreach (var item in ListaPesTel)
                {
                    var pete = new PESSOA_TELEFONE()
                    {
                        PETE_TELEFONE = item.PETE_TELEFONE,
                        PETE_TIPO = item.PETE_TIPO
                    };

                    pete.PESSOA = Pessoa;
                    if (item.OPERADORA_CELULAR != null)
                        pete.OPERADORA_CELULAR = ctx.OPERADORA_CELULAR.FirstOrDefault(x => x.OPCE_PK_ID == item.OPERADORA_CELULAR.OPCE_PK_ID);
                    ctx.AddToPESSOA_TELEFONE(pete);
                }
                //----------

                //responsável--
                foreach (var item in ListaPesResp)
                {

                    var pere = new PESSOA_RESPONSAVEL()
                    {
                        PERE_DATA_FIM = item.PERE_DATA_FIM,
                        PERE_DATA_INI = item.PERE_DATA_INI
                    };

                    pere.PESSOA = Pessoa;
                    pere.PESSOA_FISICA = ctx.PESSOA_FISICA.FirstOrDefault(x => x.PEFI_PK_FK_PESS == item.PESSOA_FISICA.PEFI_PK_FK_PESS);
                    ctx.AddToPESSOA_RESPONSAVEL(pere);
                }
                //----------
                foreach (var item in ListaPessoaConta)
                {
                    var pecb = new PESSOA_CONTA_BANCARIA()
                    {
                        PECB_AGENCIA_DIGITO = item.PECB_AGENCIA_DIGITO,
                        PECB_AGENCIA_NUM = item.PECB_AGENCIA_NUM,
                        PECB_CONTA_DIGITO = item.PECB_CONTA_DIGITO,
                        PECB_CONTA_NUM = item.PECB_CONTA_NUM,
                        PECB_NOME = item.PECB_NOME,
                        PESSOA = Pessoa
                    };
                    pecb.BANCO = ctx.BANCO.FirstOrDefault(x => x.BANC_PK_ID == item.BANCO.BANC_PK_ID);
                    ctx.AddToPESSOA_CONTA_BANCARIA(pecb);
                }

                foreach (var item in ListaPessoaDespesa)
                {
                    var pda = new PESSOA_DESPESA_AVULSA()
                    {
                        PEDA_QUANTIDADE = item.PEDA_QUANTIDADE,
                        PEDA_VALOR_UNITARIO = item.PEDA_VALOR_UNITARIO,
                        PEDA_VALOR = item.PEDA_VALOR,
                        DUPLICATA = null,
                        PEDA_DATA = item.PEDA_DATA,
                        PESSOA = Pessoa
                    };
                    pda.CATEGORIA_FINANCEIRO = ctx.CATEGORIA_FINANCEIRO.FirstOrDefault(x => x.CAFI_PK_ID == item.CATEGORIA_FINANCEIRO.CAFI_PK_ID);
                    ctx.AddToPESSOA_DESPESA_AVULSA(pda);
                }

                // ----------------------- DADOS MEDICOS -----------------
                //CONTATOS DE EMERGENCA
                foreach (var item in ListaPesTelEmer)
                {
                    var pce = new PESSOA_FISICA_CONTATO_EMERGENCIA()
                    {
                        PFCE_NOME = item.PFCE_NOME,
                        PFCE_TELEFONE = item.PFCE_TELEFONE,
                        PESSOA_FISICA = Pessoa.PESSOA_FISICA
                    };
                    ctx.AddToPESSOA_FISICA_CONTATO_EMERGENCIA(pce);
                }
                //Hospitais
                foreach (var item in ListaHospitais)
                {
                    var pfh = new PESSOA_FISICA_HOSPITAL()
                    {
                        PESSOA_FISICA = Pessoa.PESSOA_FISICA,
                    };
                    pfh.HOSPITAL = ctx.HOSPITAL.FirstOrDefault(x => x.HOSP_PK_FK_PEJU == item.HOSPITAL.HOSP_PK_FK_PEJU);
                    ctx.AddToPESSOA_FISICA_HOSPITAL(pfh);
                }
                //ALERGIAS
                foreach (var item in ListaAlergias)
                {
                    var pfa = new PESSOA_FISICA_ALERGIA()
                    {
                        PESSOA_FISICA = Pessoa.PESSOA_FISICA
                    };
                    pfa.ALERGIA = ctx.ALERGIA.FirstOrDefault(x => x.ALER_PK_ID == item.ALERGIA.ALER_PK_ID);
                    ctx.AddToPESSOA_FISICA_ALERGIA(pfa);
                }
                //MEDICACOES
                foreach (var item in ListaMedicacoes)
                {
                    var pfr = new PESSOA_FISICA_REMEDIO()
                    {
                        PESSOA_FISICA = Pessoa.PESSOA_FISICA
                    };
                    pfr.REMEDIO = ctx.REMEDIO.FirstOrDefault(x => x.REME_PK_ID == item.REMEDIO.REME_PK_ID);
                    ctx.AddToPESSOA_FISICA_REMEDIO(pfr);
                }

                if (!String.IsNullOrWhiteSpace(ddlFederacao.SelectedValue))
                {
                    salvarFederacao();
                }
                ctx.SaveChanges();

                afuLogotipo.ClearAllFilesFromPersistedStore();
                afuLogotipo.ClearFileFromPersistedStore();
                afuLogotipo.Dispose();
                imgLogotipo.Dispose();

                afuFoto.ClearAllFilesFromPersistedStore();
                afuFoto.ClearFileFromPersistedStore();
                afuFoto.Dispose();
                imgFoto.Dispose();

                afuAssinatura.ClearAllFilesFromPersistedStore();
                afuAssinatura.ClearFileFromPersistedStore();
                afuAssinatura.Dispose();
                imgAssinatura.Dispose();

                string pathImg = null;
                string pathImgAssinatura = null;
                if (hfTipoPessoa.Value == "F")
                {
                    pathImg = pathFoto;
                    pathImgAssinatura = pathAssinatura;
                }
                else
                    pathImg = pathLogotipo;

                #region IMAGEM DA ASSINATURA
                if (pathImgAssinatura != null)
                {
                    if (!pathAssinatura.Contains(String.Format("/uploads/pessoa/{0}/assinatura", Pessoa.PESS_PK_ID)))
                    {
                        try
                        {
                            var pathRelativoPessoa = String.Format("~/uploads/pessoa/{0}/assinatura", Pessoa.PESS_PK_ID);
                            if (Directory.Exists(Server.MapPath(pathRelativoPessoa)))
                                Directory.Delete(Server.MapPath(pathRelativoPessoa), true);


                            if (!Directory.Exists(Server.MapPath(pathRelativoPessoa)))
                                Directory.CreateDirectory(Server.MapPath(pathRelativoPessoa));

                            var nomeArquivo = pathAssinatura.Split('/').LastOrDefault();
                            IO.SalvaImagem(pathAssinatura, pathRelativoPessoa, nomeArquivo, 150, 161, 7);
                        }
                        catch (Exception ex)
                        {
                            Log.Logar(ex);
                        }
                    }
                }
                else
                {
                    if (IO.ListaArquivos(String.Format("~/uploads/pessoa/{0}/assinatura/", Pessoa.PESS_PK_ID), true).Any())
                        try
                        {
                            Directory.Delete(Server.MapPath(String.Format("~/uploads/pessoa/{0}/assinatura/", Pessoa.PESS_PK_ID)), true);
                        }
                        catch (Exception ex)
                        {
                            Log.Logar(ex);
                        }
                }

                try
                {
                    if (Directory.Exists(Server.MapPath(String.Format("~/uploads/pessoa/temp/{0}/assinatura/", Session.SessionID))))
                        Directory.Delete(Server.MapPath(String.Format("~/uploads/pessoa/temp/{0}/assinatura/", Session.SessionID)), true);
                }
                catch (Exception ex)
                {
                    Log.Logar(ex);
                }
                #endregion

                #region IMAGEM PERFIL
                if (pathImg != null)
                {
                    if (!pathImg.Contains(String.Format("/uploads/pessoa/{0}", Pessoa.PESS_PK_ID)))
                    {
                        try
                        {
                            var pathRelativoPessoa = String.Format("~/uploads/pessoa/{0}/", Pessoa.PESS_PK_ID);

                            var pathPequena = pathRelativoPessoa + "pequena/";
                            var pathGrande = pathRelativoPessoa + "grande/";
                            var pathOriginal = pathRelativoPessoa + "original/";

                            if (!Directory.Exists(Server.MapPath(pathPequena)))
                                Directory.CreateDirectory(Server.MapPath(pathPequena));

                            if (!Directory.Exists(Server.MapPath(pathGrande)))
                                Directory.CreateDirectory(Server.MapPath(pathGrande));

                            if (!Directory.Exists(Server.MapPath(pathOriginal)))
                                Directory.CreateDirectory(Server.MapPath(pathOriginal));

                            var nomeArquivo = pathImg.Split('/').LastOrDefault();

                            // Salva Thumb
                            IO.SalvaImagem(pathImg, pathPequena, nomeArquivo, 150, 161, 7);
                            // Salva Grande
                            IO.SalvaImagem(pathImg, pathGrande, nomeArquivo, 800, 600, 7);
                            //Salva Original
                            IO.SalvaImagem(pathImg, pathOriginal, nomeArquivo);

                            if (File.Exists(Server.MapPath(pathImg)))
                            {
                                File.Delete(Server.MapPath(pathImg));
                            }
                        }
                        catch (Exception ex)
                        {
                            Log.Logar(ex);
                        }
                    }
                }
                else
                {
                    if (IO.ListaArquivos(String.Format("~/uploads/pessoa/{0}/", Pessoa.PESS_PK_ID), true).Any())
                        try
                        {
                            List<string> listPath = new List<string>();
                            listPath.Add(HttpContext.Current.Server.MapPath(String.Format("~/uploads/pessoa/{0}/pequena/", Pessoa.PESS_PK_ID)));
                            listPath.Add(HttpContext.Current.Server.MapPath(String.Format("~/uploads/pessoa/{0}/grande/", Pessoa.PESS_PK_ID)));
                            listPath.Add(HttpContext.Current.Server.MapPath(String.Format("~/uploads/pessoa/{0}/original/", Pessoa.PESS_PK_ID)));

                            foreach (var itemPath in listPath)
                            {
                                IEnumerable<string> files = Directory.EnumerateFiles(itemPath, "*.*",
                                                                       SearchOption.AllDirectories);
                                foreach (var item in files)
                                {
                                    File.Delete(item);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Log.Logar(ex);
                        }
                }

                try
                {
                    if (Directory.Exists(Server.MapPath(String.Format("~/uploads/pessoa/temp/{0}/", Session.SessionID))))
                        Directory.Delete(Server.MapPath(String.Format("~/uploads/pessoa/temp/{0}/", Session.SessionID)), true);
                }
                catch (Exception ex)
                {
                    Log.Logar(ex);
                }
                #endregion
                CadastroMasks();
                return Pessoa.PESS_PK_ID;
            }
        }

        #endregion

        #region CRUD_ENDERECO
        protected void salvarEnd(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtEnde.Text))
            {
                jsAlert(upModalEnd, "endvazio", "Preencha o endereço");
                txtEnde.Focus();
                return;
            }

            PESSOA_ENDERECO myPessoaEnd;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                int value;
                bool isInsert = string.IsNullOrEmpty(hfIndexEnd.Value);
                if (isInsert)
                {
                    myPessoaEnd = new PESSOA_ENDERECO();

                    value = Convert.ToInt32(ddlMun.SelectedItem.Value);
                    if (value != 0)
                    {
                        MUNICIPIO muni = ctx.MUNICIPIO.SingleOrDefault(p => p.MUNI_PK_ID == value);
                        if (muni != null)
                        {
                            myPessoaEnd.PEEN_CIDADE = stringNula(muni.MUN_DESCRICAO);
                            myPessoaEnd.PEEN_ESTADO = stringNula(muni.MUN_ESTADO);
                            myPessoaEnd.MUNICIPIO = muni;
                        }

                        if (!String.IsNullOrWhiteSpace(ddlBai.SelectedValue))
                        {
                            value = Convert.ToInt32(ddlBai.SelectedValue);
                            BAIRRO bai = ctx.BAIRRO.SingleOrDefault(p => p.BAIR_PK_ID == value);
                            if (bai != null)
                            {
                                myPessoaEnd.PEEN_BAIRRO = stringNula(bai.BAIR_DESCRICAO);
                                myPessoaEnd.BAIRRO = bai;
                            }
                        }
                    }

                    myPessoaEnd.PEEN_ESTADO = stringNula(ddlEst.SelectedItem.Text);
                    myPessoaEnd.PEEN_ENDERECO = stringNula(txtEnde.Text);
                    myPessoaEnd.PEEN_COMPLEMENTO = stringNula(txtEndComp.Text);
                    myPessoaEnd.PEEN_NUMERO = stringNula(txtEndNum.Text);
                    myPessoaEnd.PEEN_CEP = stringNula(txtCep.Text);
                    myPessoaEnd.PEEN_TIPO = Convert.ToByte(stringNula(ddlEndTipo.SelectedItem.Value));

                    if (idPessoa == 0)
                        ListaPesEnd.Add(myPessoaEnd);
                    else
                    {
                        myPessoaEnd.PESSOA = ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == idPessoa);
                        ctx.AddToPESSOA_ENDERECO(myPessoaEnd);
                        ctx.SaveChanges();
                    }
                }
                else
                {
                    int index = Convert.ToInt32(hfIndexEnd.Value);
                    if (idPessoa == 0)
                    {
                        value = Convert.ToInt32(ddlMun.SelectedItem.Value);
                        var item = ListaPesEnd[index];

                        if (value != 0)
                        {
                            MUNICIPIO muni = ctx.MUNICIPIO.SingleOrDefault(p => p.MUNI_PK_ID == value);

                            if (muni != null)
                            {
                                item.PEEN_CIDADE = stringNula(muni.MUN_DESCRICAO);
                                item.PEEN_ESTADO = stringNula(muni.MUN_ESTADO);
                                item.MUNICIPIO = muni;
                            }

                            if (!String.IsNullOrWhiteSpace(ddlBai.SelectedValue))
                            {
                                value = Convert.ToInt32(ddlBai.SelectedItem.Value);
                                BAIRRO bai = ctx.BAIRRO.SingleOrDefault(p => p.BAIR_PK_ID == value);
                                if (bai != null)
                                {
                                    item.PEEN_BAIRRO = stringNula(bai.BAIR_DESCRICAO);
                                    item.BAIRRO = bai;
                                }
                            }
                        }

                        item.PEEN_ESTADO = stringNula(ddlEst.SelectedItem.Text);
                        item.PEEN_ENDERECO = stringNula(txtEnde.Text);
                        item.PEEN_COMPLEMENTO = stringNula(txtEndComp.Text);
                        item.PEEN_NUMERO = stringNula(txtEndNum.Text);
                        item.PEEN_CEP = stringNula(txtCep.Text);
                        item.PEEN_TIPO = Convert.ToByte(stringNula(ddlEndTipo.SelectedItem.Value));
                    }
                    else
                    {
                        value = Convert.ToInt32(ddlMun.SelectedItem.Value);
                        var item = ctx.PESSOA_ENDERECO.FirstOrDefault(x => x.PEEN_PK_ID == index);

                        if (value != 0)
                        {
                            MUNICIPIO muni = ctx.MUNICIPIO.SingleOrDefault(p => p.MUNI_PK_ID == value);

                            if (muni != null)
                            {
                                item.PEEN_CIDADE = stringNula(muni.MUN_DESCRICAO);
                                item.PEEN_ESTADO = stringNula(muni.MUN_ESTADO);
                                item.MUNICIPIO = muni;
                            }

                            if (!String.IsNullOrWhiteSpace(ddlBai.SelectedValue))
                            {
                                value = Convert.ToInt32(ddlBai.SelectedItem.Value);
                                BAIRRO bai = ctx.BAIRRO.SingleOrDefault(p => p.BAIR_PK_ID == value);
                                if (bai != null)
                                {
                                    item.PEEN_BAIRRO = stringNula(bai.BAIR_DESCRICAO);
                                    item.BAIRRO = bai;
                                }
                            }
                        }

                        item.PEEN_ESTADO = stringNula(ddlEst.SelectedItem.Text);
                        item.PEEN_ENDERECO = stringNula(txtEnde.Text);
                        item.PEEN_COMPLEMENTO = stringNula(txtEndComp.Text);
                        item.PEEN_NUMERO = stringNula(txtEndNum.Text);
                        item.PEEN_CEP = stringNula(txtCep.Text);
                        item.PEEN_TIPO = Convert.ToByte(stringNula(ddlEndTipo.SelectedItem.Value));
                        ctx.SaveChanges();
                    }
                }
            }
            bindEnderecos();

            txtCep.Text = string.Empty;
            ddlEndTipo.SelectedIndex = -1;
            txtEnde.Text = string.Empty;
            txtEndNum.Text = string.Empty;
            txtEndComp.Text = string.Empty;
            ddlEst.SelectedIndex = -1;
            ddlMun.SelectedIndex = -1;
            ddlBai.SelectedIndex = -1;
            hfIndexEnd.Value = string.Empty;
            ScriptManager.RegisterClientScriptBlock(upEndereco, upEndereco.GetType(), "fechamodalender", "$('#fecharend').trigger('click');", true);
        }

        protected void editar_End(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_ENDERECO item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.PESSOA_ENDERECO.FirstOrDefault(x => x.PEEN_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaPesEnd[index];
                }
                txtCep.Text = item.PEEN_CEP;
                ddlEndTipo.SelectedValue = item.PEEN_TIPO == null ? String.Empty : ddlEndTipo.Items.FindByValue(item.PEEN_TIPO.ToString()).Value;
                txtEnde.Text = item.PEEN_ENDERECO;
                txtEndNum.Text = item.PEEN_NUMERO;
                txtEndComp.Text = item.PEEN_COMPLEMENTO;
                ddlEst.SelectedValue = item.PEEN_ESTADO == null ? String.Empty : ddlEst.Items.FindByText(item.PEEN_ESTADO).Value;
                troca_estado();

                ddlMun.SelectedValue = item.MUNICIPIO == null ? String.Empty : ddlMun.Items.FindByValue(item.MUNICIPIO.MUNI_PK_ID.ToString()) == null ? String.Empty : ddlMun.Items.FindByValue(item.MUNICIPIO.MUNI_PK_ID.ToString()).Value;
                troca_municipio();

                ddlBai.SelectedValue = item.BAIRRO == null || item.MUNICIPIO == null ? String.Empty : ddlBai.Items.FindByValue(item.BAIRRO.BAIR_PK_ID.ToString()) == null ? String.Empty : ddlBai.Items.FindByValue(item.BAIRRO.BAIR_PK_ID.ToString()).Value;
            }
            hfIndexEnd.Value = index.ToString();
            ScriptManager.RegisterClientScriptBlock(upEndereco, upEndereco.GetType(), "abremodalend", "$('#modalEnd').modal('show');", true);
            upModalEnd.Update();
        }

        private void bindEnderecos()
        {
            if (Request.QueryString["PESS_PK_ID"] == null)
            {
                lvEnd.DataSource = ListaPesEnd;
                lvEnd.DataBind();
            }
            else
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    var pk = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);

                    lvEnd.DataSource = ctx.PESSOA_ENDERECO.Where(x => x.PESSOA.PESS_PK_ID == pk);
                    lvEnd.DataBind();
                }
            upEndereco.Update();
        }
        protected void deletar_End(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_ENDERECO item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.PESSOA_ENDERECO.FirstOrDefault(x => x.PEEN_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaPesEnd[index];
                }
                if (item.PEEN_PK_ID != 0)
                {
                    ctx.DeleteObject(item);
                    ctx.SaveChanges();
                }
                else
                    ListaPesEnd.RemoveAt(index);
            }
            CadastroMasks();
            bindEnderecos();
        }

        protected void btnIncEnd_Click(object sender, EventArgs e)
        {
            txtCep.Text = string.Empty;
            txtEnde.Text = string.Empty;
            txtEndComp.Text = string.Empty;
            txtEndNum.Text = string.Empty;

            ddlEst.SelectedIndex = -1;
            ddlMun.SelectedIndex = -1;
            ddlBai.SelectedIndex = -1;
            ddlEndTipo.SelectedIndex = -1;

            ddlMun.Enabled = false;
            ddlBai.Enabled = false;
            CadastroMasks();
            ScriptManager.RegisterClientScriptBlock(upModalEnd, upModalEnd.GetType(), "incEnd", "$('#modalEnd').modal('show');" +
                                        "$('#modalEnd').on('shown', function () { $('#' + getOBJ('txtCep').id).focus(); });", true);
            txtCep.Focus();
        }
        #endregion

        #region CRUD_TELEFONE
        protected void salvarTel(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtTel.Text))
            {
                jsAlert(upModalTel, "telvazio", "Preencha o telefone");
                txtTel.Focus();
                return;
            }

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                bool isInsert = string.IsNullOrEmpty(hfIndexTel.Value);
                if (isInsert)
                {
                    var _entity = new PESSOA_TELEFONE();

                    OPERADORA_CELULAR op = ctx.OPERADORA_CELULAR.SingleOrDefault(p => p.OPCE_DESCRICAO == ddlOper.SelectedItem.Text);

                    //if (op != null)
                    //    ctx.Attach<OPERADORA_CELULAR>(op);
                    _entity.OPERADORA_CELULAR = op;
                    _entity.PETE_SMS = cbSms.Checked;
                    _entity.PETE_TELEFONE = stringNula(txtTel.Text);
                    _entity.PETE_TIPO = Convert.ToByte(ddlTipo.SelectedItem.Value);
                    if (idPessoa == 0)
                        ListaPesTel.Add(_entity);
                    else
                    {
                        _entity.PESSOA = ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == idPessoa);
                        ctx.AddToPESSOA_TELEFONE(_entity);
                        ctx.SaveChanges();
                    }
                }
                else
                {
                    int index = Convert.ToInt32(hfIndexTel.Value);

                    if (idPessoa == 0)
                    {
                        var _entity = ListaPesTel[index];
                        _entity.OPERADORA_CELULAR = ctx.OPERADORA_CELULAR.SingleOrDefault(p => p.OPCE_DESCRICAO == ddlOper.SelectedItem.Text);
                        _entity.PETE_SMS = cbSms.Checked;
                        _entity.PETE_TELEFONE = stringNula(txtTel.Text);
                        _entity.PETE_TIPO = Convert.ToByte(ddlTipo.SelectedItem.Value);
                    }
                    else
                    {
                        var _entity = ctx.PESSOA_TELEFONE.FirstOrDefault(x => x.PETE_PK_ID == index);
                        _entity.OPERADORA_CELULAR = ctx.OPERADORA_CELULAR.SingleOrDefault(p => p.OPCE_DESCRICAO == ddlOper.SelectedItem.Text);
                        _entity.PETE_SMS = cbSms.Checked;
                        _entity.PETE_TELEFONE = stringNula(txtTel.Text);
                        _entity.PETE_TIPO = Convert.ToByte(ddlTipo.SelectedItem.Value);
                        ctx.SaveChanges();
                    }
                }
            }
            bindTelefones();

            txtTel.Text = string.Empty;
            ddlTipo.SelectedIndex = -1;
            hfIndexTel.Value = string.Empty;
            ScriptManager.RegisterClientScriptBlock(upTel, upTel.GetType(), "fechamodaltel", "$('#fechartel').trigger('click');" +
                                "$('#' + getOBJ('ddlTipo').id).change(function () {" +
                                "   if ($('#' + getOBJ('ddlTipo').id + ' :selected').html() == 'Celular')" +
                                "       $('#divOp').show(Tempo);" +
                                "   else {" +
                                "       $('#divOp').hide(Tempo);" +
                                "       $('#' + getOBJ('ddlOper').id).val(0)" +
                                "   }" +
                                "});"
            , true);
        }
        protected void editar_Tel(object sender, CommandEventArgs e)
        {
            int index;
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_TELEFONE _entity;

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    _entity = ctx.PESSOA_TELEFONE.FirstOrDefault(x => x.PETE_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    _entity = ListaPesTel[index];
                }
                txtTel.Text = _entity.PETE_TELEFONE;
                ddlTipo.SelectedValue = _entity.PETE_TIPO == null ? String.Empty : ddlTipo.Items.FindByValue(_entity.PETE_TIPO.ToString()).Value;
                ddlOper.SelectedValue = _entity.OPERADORA_CELULAR == null ? String.Empty : ddlOper.Items.FindByText(_entity.OPERADORA_CELULAR.OPCE_DESCRICAO).Value;
                cbSms.Checked = _entity.PETE_SMS;
            }

            hfIndexTel.Value = index.ToString();
            ScriptManager.RegisterClientScriptBlock(upTel, upTel.GetType(), "abremodaltel",
                "if ($('#' + getOBJ('ddlTipo').id + ' :selected').html() == 'Celular')" +
                "    $('#divOp').show();" +
                "$('#' + getOBJ('ddlTipo').id).change(function () {" +
                "if ($('#' + getOBJ('ddlTipo').id + ' :selected').html() == 'Celular')" +
                "    $('#divOp').show(Tempo);" +
                "else {" +
                    "$('#divOp').hide(Tempo);" +
                    "$('#divSms').hide(Tempo);" +
                    "$('#' + getOBJ('ddlOper').id).val(0)" +
                    "}" +
                "});" +
                "$('#modalTel').modal('show');",
                true);
            upModalTel.Update();
        }
        protected void deletar_Tel(object sender, CommandEventArgs e)
        {
            int index;
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_TELEFONE _entity;

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    _entity = ctx.PESSOA_TELEFONE.FirstOrDefault(x => x.PETE_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    _entity = ListaPesTel[index];
                }

                if (_entity.PETE_PK_ID != 0)
                {
                    ctx.DeleteObject(_entity);
                    ctx.SaveChanges();
                }
                else
                    ListaPesTel.Remove(_entity);
            }
            bindTelefones();
        }
        private void bindTelefones()
        {
            if (Request.QueryString["PESS_PK_ID"] == null)
            {
                lvTel.DataSource = ListaPesTel;
                lvTel.DataBind();
            }
            else
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    var pk = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);

                    lvTel.DataSource = ctx.PESSOA_TELEFONE.Where(x => x.PESSOA.PESS_PK_ID == pk);
                    lvTel.DataBind();
                }
            upTel.Update();
        }
        #endregion

        #region CRUD_EMAIL
        protected void salvarEmail(object sender, EventArgs e)
        {

            using (FederacaoEntities ctx = new FederacaoEntities())
            {

                PESSOA_EMAIL email = ctx.PESSOA_EMAIL.SingleOrDefault(p => p.PEEM_EMAIL == txtEmail.Text && p.PESSOA.PESS_PK_ID == idPessoa);

                bool isInsert = string.IsNullOrEmpty(hfIndexEmail.Value);
                if (isInsert)
                {
                    var PesEmail = new PESSOA_EMAIL();

                    PesEmail.PEEM_EMAIL = txtEmail.Text;
                    PesEmail.PESSOA = Pessoa;
                    PesEmail.PEEM_TIPO = Convert.ToByte(ddlTipoEmail.SelectedValue);

                    if (idPessoa == 0)
                        ListaPesEmail.Add(PesEmail);

                    else
                    {
                        PesEmail.PESSOA = ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == idPessoa);
                        ctx.AddToPESSOA_EMAIL(PesEmail);
                        ctx.SaveChanges();
                    }
                }
                else
                {
                    int index = Convert.ToInt32(hfIndexEmail.Value);
                    if (idPessoa == 0)
                    {
                        ListaPesEmail[index].PEEM_EMAIL = txtEmail.Text;
                        ListaPesEmail[index].PEEM_TIPO = Convert.ToByte(ddlTipoEmail.SelectedValue);
                    }
                    else
                    {

                        var _entity = ctx.PESSOA_EMAIL.FirstOrDefault(x => x.PEEM_PK_ID == index);
                        _entity.PEEM_EMAIL = txtEmail.Text;
                        _entity.PEEM_TIPO = Convert.ToByte(ddlTipoEmail.SelectedValue);
                        ctx.SaveChanges();
                    }
                }
            }

            bindEmails();

            txtEmail.Text = ddlTipoEmail.SelectedValue = string.Empty;
            hfIndexEmail.Value = string.Empty;
            ScriptManager.RegisterClientScriptBlock(upEmail, upEmail.GetType(), "fechamodalemail", "$('#fecharemail').trigger('click')", true);

        }
        private void bindEmails()
        {
            if (Request.QueryString["PESS_PK_ID"] == null)
            {
                lvEmail.DataSource = ListaPesEmail;
                lvEmail.DataBind();
            }
            else
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    var pk = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);

                    lvEmail.DataSource = ctx.PESSOA_EMAIL.Where(x => x.PESSOA.PESS_PK_ID == pk);
                    lvEmail.DataBind();
                }
            upEmail.Update();
        }
        protected void editar_Email(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_EMAIL item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.PESSOA_EMAIL.FirstOrDefault(x => x.PEEM_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaPesEmail[index];
                }
            }
            txtEmail.Text = item.PEEM_EMAIL;
            ddlTipoEmail.SelectedValue = item.PEEM_TIPO.ToString();
            hfIndexEmail.Value = index.ToString();

            ScriptManager.RegisterClientScriptBlock(upEmail, upEmail.GetType(), "abremodalemail", "$('#modalEmail').modal('show');", true);
            upModalEmail.Update();
        }
        protected void deletar_Email(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_EMAIL item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.PESSOA_EMAIL.FirstOrDefault(x => x.PEEM_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaPesEmail[index];
                }
                if (item.PEEM_PK_ID != 0)
                {
                    ctx.DeleteObject(item);
                    ctx.SaveChanges();
                }
                else
                    ListaPesEmail.RemoveAt(index);
            }
            bindEmails();
        }

        protected void salvarDocs(object sender, EventArgs e)
        {
            byte[] binarioRgCnh = null;
            byte[] binarioComprovanteResidencia = null;
            string[] extensoes = { "PDF", "JPG", "JPEG", "PNG" };
            try
            {
                if (fuRgCnh.HasFile)
                {
                    binarioRgCnh = fuRgCnh.FileBytes;
                    if (!extensoes.Contains(Utilitarios.RetornaExtensaoArquivo(binarioRgCnh)))
                        throw new NegocioException("A extensão do RG/CNH é inválida, selecione outro Arquivo!");
                }
                else
                {
                    throw new NegocioException("Insira um documento para continuar");
                }
                if (fuComprovanteRes.HasFile)
                {
                    binarioComprovanteResidencia = fuComprovanteRes.FileBytes;
                    if (!extensoes.Contains(Utilitarios.RetornaExtensaoArquivo(binarioComprovanteResidencia)))
                        throw new NegocioException("A extensão do comprovante de residência é inválida, selecione outro comprovante de residência!");
                }
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    var pessoa = ctx.PESSOA.FirstOrDefault(pessoaBanco => pessoaBanco.PESS_PK_ID == Pessoa.PESS_PK_ID);
                    if (fuRgCnh.HasFile)
                    {

                        ARQUIVO rgcnh = new ARQUIVO();
                        rgcnh.ARQU_ARQUIVO = binarioRgCnh;
                        rgcnh.ARQU_DESCRICAO = Utilitarios.RetornaExtensaoArquivo(fuRgCnh.FileBytes);
                        rgcnh.PESSOA = pessoa;
                        rgcnh.ARQU_TIPO = (byte)TIPO_ARQUIVO.RgCnh;
                        ctx.AddToARQUIVO(rgcnh);
                    }

                    if (fuComprovanteRes.HasFile)
                    {
                        ARQUIVO comprovanteRes = new ARQUIVO();
                        comprovanteRes.ARQU_ARQUIVO = binarioComprovanteResidencia;
                        comprovanteRes.ARQU_DESCRICAO = Utilitarios.RetornaExtensaoArquivo(fuComprovanteRes.FileBytes);
                        comprovanteRes.PESSOA = pessoa;
                        comprovanteRes.ARQU_TIPO = (byte)TIPO_ARQUIVO.ComprovanteResidencia;
                        ctx.AddToARQUIVO(comprovanteRes);
                    }
                    ctx.SaveChanges();
                    Pessoa = ctx.PESSOA.FirstOrDefault(pessoaBanco => pessoaBanco.PESS_PK_ID == idPessoa);
                }
                bindDocs();
            }
            catch (NegocioException ex)
            {
                Ajax.JavascriptAlert(this, ex.Message);
            }
            catch (Exception ex)
            {
                hfErro.Value = ex.Message;
                Ajax.JavascriptAlert(this, "Algo deu errado;");
            }
        }

        private void bindDocs()
        {
            using(FederacaoEntities ctx = new FederacaoEntities())
            {
                lvDocumentos.DataSource = ctx.ARQUIVO.Where(x => x.PESSOA.PESS_PK_ID == Pessoa.PESS_PK_ID);/*Pessoa.ARQUIVO.ToList();*/
                lvDocumentos.DataBind();
            }
        }
        protected void editar_Documento(object sender, CommandEventArgs e)
        {
            //var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            //PESSOA_EMAIL item;
            //int index;
            //using (FederacaoEntities ctx = new FederacaoEntities())
            //{
            //    if (!hf.Value.Equals(string.Empty))
            //    {
            //        index = Convert.ToInt32(hf.Value);
            //        item = ctx.PESSOA_EMAIL.FirstOrDefault(x => x.PEEM_PK_ID == index);
            //    }
            //    else
            //    {
            //        index = Convert.ToInt32(e.CommandArgument);
            //        item = ListaPesEmail[index];
            //    }
            //}
            //txtEmail.Text = item.PEEM_EMAIL;
            //ddlTipoEmail.SelectedValue = item.PEEM_TIPO.ToString();
            //hfIndexEmail.Value = index.ToString();

            //ScriptManager.RegisterClientScriptBlock(upEmail, upEmail.GetType(), "abremodalemail", "$('#modalEmail').modal('show');", true);
            //upModalEmail.Update();
        }
        protected void deletar_Documento(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            ARQUIVO item;
            int index = 0;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.ARQUIVO.FirstOrDefault(x => x.ARQU_PK_ID == index);
                }
                else
                {
                    //index = Convert.ToInt32(e.CommandArgument);
                    //item = ListaPesEmail[index];
                    item = ctx.ARQUIVO.FirstOrDefault(x => x.PESSOA.PESS_PK_ID == index);
                }
                if (item.PESSOA.PESS_PK_ID != 0)
                {
                    ctx.DeleteObject(item);
                    ctx.SaveChanges();
                }
            }
            bindDocs();
        }
        #endregion

        #region CRUD_RESPONSAVEL
        protected void salvarResp(object sender, EventArgs e)
        {
            var PesResp = new PESSOA_RESPONSAVEL();
            int idresp = Convert.ToInt32(hfIDresp.Value);
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (setValAcao != 1)
                {
                    Pessoa = ctx.PESSOA.SingleOrDefault(p => p.PESS_PK_ID == idresp);
                }


                if (Pessoa != null)
                {
                    if (idPessoa == 0)
                    {
                        if (ListaPesResp.Any(x => x.PESSOA_FISICA.PEFI_PK_FK_PESS == Pessoa.PESS_PK_ID))
                        {
                            jsAlert(upModalResp, "erroresp", "A pessoa selecionada ja existe na lista");
                            txtResp.Text = string.Empty;
                            hfIDresp.Value = string.Empty;
                            return;
                        }
                        PesResp.PESSOA_FISICA = Pessoa.PESSOA_FISICA;
                        ListaPesResp.Add(PesResp);
                    }
                    else
                    {
                        if (setValAcao == 1)
                        {
                            PesResp = ctx.PESSOA_RESPONSAVEL.Where(p => p.PERE_PK_ID == idresp).FirstOrDefault();
                        }
                        else
                        {
                            if (ctx.PESSOA_RESPONSAVEL.Any(x => x.PESSOA.PESS_PK_ID == idPessoa && x.PESSOA_FISICA.PEFI_PK_FK_PESS == Pessoa.PESS_PK_ID))
                            {
                                jsAlert(upModalResp, "erroresp", "A pessoa selecionada ja existe na lista");
                                txtResp.Text = string.Empty;
                                hfIDresp.Value = string.Empty;
                                return;
                            }
                            PesResp.PESSOA_FISICA = Pessoa.PESSOA_FISICA;
                            PesResp.PESSOA = ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == idPessoa);
                            ctx.AddToPESSOA_RESPONSAVEL(PesResp);

                        }
                        //Validação Alterar Responsável para Responsável Financeiro.
                        List<PESSOA_RESPONSAVEL> lstresp;

                        if (RespFinan.Checked)
                        {
                            lstresp = ctx.PESSOA_RESPONSAVEL.Where(x => x.PERE_RESPFIN == true && x.PESSOA.PESS_PK_ID == idPessoa).ToList();
                            foreach (var item in lstresp)
                            {
                                item.PERE_RESPFIN = false;
                            }

                            PesResp.PERE_RESPFIN = true;
                            ctx.SaveChanges();
                        }
                        else
                        {
                            PesResp.PERE_RESPFIN = false;
                        }
                        ctx.SaveChanges();

                        //Limpar os campos
                        txtResp.Text = string.Empty;
                        RespFinan.Checked = false;
                        RespFinan.Enabled = true;
                    }
                }
                phRespNome.Visible = true;
                bindReponsavel();
                ScriptManager.RegisterClientScriptBlock(upResp, upResp.GetType(), "fechamodalresp", "$('#fecharresp').trigger('click')", true);
            }
        }
        private void bindReponsavel()
        {
            if (Request.QueryString["PESS_PK_ID"] == null)
            {
                lvResp.DataSource = ListaPesResp;
                lvResp.DataBind();
            }
            else
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    var pk = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);

                    lvResp.DataSource = ctx.PESSOA_RESPONSAVEL.Where(x => x.PESSOA.PESS_PK_ID == pk);
                    lvResp.DataBind();
                }
            upResp.Update();
        }
        protected void deletar_resp(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_RESPONSAVEL item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.PESSOA_RESPONSAVEL.FirstOrDefault(x => x.PERE_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaPesResp[index];
                }
                if (item.PERE_PK_ID != 0)
                {
                    ctx.DeleteObject(item);
                    ctx.SaveChanges();
                }
                else
                    ListaPesResp.Remove(item);
            }
            bindReponsavel();
        }
        #endregion

        #region CRUD_CONTAS
        protected void salvarConta(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtContaDig.Text) || string.IsNullOrEmpty(txtContaNum.Text) ||
                string.IsNullOrEmpty(txtAgenciaDig.Text) || string.IsNullOrEmpty(txtAgenciaNum.Text) || String.IsNullOrWhiteSpace(ddlBancos.SelectedValue))
            {
                jsAlert(upModalBank, "containvalida", "Preencha todos os campos");
                txtNomeConta.Focus();
                return;
            }
            else
            {
                int agencianum = Convert.ToInt32(txtAgenciaNum.Text);
                int contanum = Convert.ToInt32(txtContaNum.Text);
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    PESSOA_CONTA_BANCARIA pcb = ctx.PESSOA_CONTA_BANCARIA.SingleOrDefault(p => p.PECB_AGENCIA_NUM == agencianum && p.PECB_CONTA_DIGITO == txtAgenciaDig.Text &&
                                                                                              p.PECB_CONTA_NUM == contanum && p.PECB_CONTA_DIGITO == txtContaDig.Text);

                    if (pcb != null)
                    {
                        jsAlert(upModalBank, "contaexiste", "Está conta já esta cadastrada");
                        txtNomeConta.Focus();
                        return;
                    }
                }
            }

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                bool isInsert = string.IsNullOrEmpty(hfIndexBank.Value);
                if (isInsert)
                {
                    PESSOA_CONTA_BANCARIA pcb = new PESSOA_CONTA_BANCARIA();

                    int bancoID = Convert.ToInt32(ddlBancos.SelectedValue);
                    pcb.BANCO = ctx.BANCO.FirstOrDefault(p => p.BANC_PK_ID == bancoID);
                    pcb.PECB_AGENCIA_DIGITO = stringNula(txtAgenciaDig.Text);
                    pcb.PECB_AGENCIA_NUM = intNulo(txtAgenciaNum.Text);
                    pcb.PECB_CONTA_DIGITO = stringNula(txtContaDig.Text);
                    pcb.PECB_CONTA_NUM = intNulo(txtContaNum.Text);
                    pcb.PECB_NOME = stringNula(txtNomeConta.Text);

                    if (idPessoa == 0)
                        ListaPessoaConta.Add(pcb);
                    else
                    {
                        pcb.PESSOA = ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == idPessoa);
                        ctx.AddToPESSOA_CONTA_BANCARIA(pcb);
                        ctx.SaveChanges();
                    }
                }
                else
                {
                    int index = Convert.ToInt32(hfIndexBank.Value);
                    if (idPessoa == 0)
                    {
                        int bancoID = Convert.ToInt32(ddlBancos.SelectedValue);

                        ListaPessoaConta[index].BANCO = ctx.BANCO.FirstOrDefault(p => p.BANC_PK_ID == bancoID);
                        ListaPessoaConta[index].PECB_AGENCIA_DIGITO = stringNula(txtAgenciaDig.Text);
                        ListaPessoaConta[index].PECB_AGENCIA_NUM = intNulo(txtAgenciaNum.Text);
                        ListaPessoaConta[index].PECB_CONTA_DIGITO = stringNula(txtContaDig.Text);
                        ListaPessoaConta[index].PECB_CONTA_NUM = intNulo(txtContaNum.Text);
                        ListaPessoaConta[index].PECB_NOME = stringNula(txtNomeConta.Text);
                    }
                    else
                    {
                        var _entity = ctx.PESSOA_CONTA_BANCARIA.FirstOrDefault(x => x.PECB_PK_ID == index);
                        int bancoID = Convert.ToInt32(ddlBancos.SelectedValue);
                        _entity.BANCO = ctx.BANCO.FirstOrDefault(p => p.BANC_PK_ID == bancoID);
                        _entity.PECB_AGENCIA_DIGITO = stringNula(txtAgenciaDig.Text);
                        _entity.PECB_AGENCIA_NUM = intNulo(txtAgenciaNum.Text);
                        _entity.PECB_CONTA_DIGITO = stringNula(txtContaDig.Text);
                        _entity.PECB_CONTA_NUM = intNulo(txtContaNum.Text);
                        _entity.PECB_NOME = stringNula(txtNomeConta.Text);
                        ctx.SaveChanges();
                    }
                }
            }
            bindContas();
            txtAgenciaDig.Text = string.Empty;
            txtAgenciaNum.Text = string.Empty;
            txtContaDig.Text = string.Empty;
            txtContaNum.Text = string.Empty;
            txtNomeConta.Text = string.Empty;
            hfIndexBank.Value = string.Empty;
            ScriptManager.RegisterClientScriptBlock(upModalBank, upModalBank.GetType(), "fechamodalbank", "$('#fecharbank').trigger('click')", true);

            upFinan.Update();
        }
        protected void editar_conta(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_CONTA_BANCARIA item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.PESSOA_CONTA_BANCARIA.Include("BANCO").FirstOrDefault(x => x.PECB_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaPessoaConta[index];
                }
            }

            txtAgenciaDig.Text = item.PECB_AGENCIA_DIGITO;
            txtAgenciaNum.Text = item.PECB_AGENCIA_NUM.ToString();
            txtContaDig.Text = item.PECB_CONTA_DIGITO;
            txtContaNum.Text = item.PECB_CONTA_NUM.ToString();
            txtNomeConta.Text = item.PECB_NOME;
            ddlBancos.SelectedValue = item.BANCO.BANC_PK_ID.ToString();
            hfIndexBank.Value = index.ToString();

            ScriptManager.RegisterClientScriptBlock(upModalBank, upModalBank.GetType(), "abremodalbank", "$('#modalBank').modal('show');", true);
            upModalBank.Update();
        }
        protected void deletar_conta(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_CONTA_BANCARIA item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.PESSOA_CONTA_BANCARIA.FirstOrDefault(x => x.PECB_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaPessoaConta[index];
                }
                if (item.PECB_PK_ID != 0)
                {
                    ctx.DeleteObject(item);
                    ctx.SaveChanges();
                }
                else
                    ListaPessoaConta.Remove(item);
            }
            bindContas();
        }
        private void bindContas()
        {
            if (Request.QueryString["PESS_PK_ID"] == null)
            {
                lvContas.DataSource = ListaPessoaConta;
                lvContas.DataBind();
            }
            else
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    var pk = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);

                    lvContas.DataSource = ctx.PESSOA_CONTA_BANCARIA.Where(x => x.PESSOA.PESS_PK_ID == pk);
                    lvContas.DataBind();
                }
            upFinan.Update();
        }
        #endregion

        #region CRUD Despesas Avulsas
        protected void salvarDesp(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtDataDesp.Text) || String.IsNullOrWhiteSpace(ddlCatFincaneiro.SelectedValue) ||
                string.IsNullOrEmpty(txtValorDesp.Text) || string.IsNullOrEmpty(txtQTDDesp.Text))
            {
                jsAlert(upModalDesp, "despesainvalida", "Preencha todos os campos");
                ddlCatFincaneiro.Focus();
                return;
            }
            else
            {
                if (Validacoes.ValidaCampoDecimal(txtValorDesp.Text) && Validacoes.ValidaCampoNumerico(txtQTDDesp.Text))
                {
                    using (FederacaoEntities ctx = new FederacaoEntities())
                    {
                        bool isInsert = string.IsNullOrEmpty(hfIndexDesp.Value);
                        if (isInsert)
                        {
                            PESSOA_DESPESA_AVULSA pda = new PESSOA_DESPESA_AVULSA();

                            decimal valor = Convert.ToDecimal(txtValorDesp.Text);

                            int catFinanceira = Convert.ToInt32(ddlCatFincaneiro.SelectedValue);
                            pda.CATEGORIA_FINANCEIRO = ctx.CATEGORIA_FINANCEIRO.FirstOrDefault(x => x.CAFI_PK_ID == catFinanceira);
                            pda.PEDA_DATA = DateTimeNulo(txtDataDesp.Text);
                            pda.PEDA_QUANTIDADE = Convert.ToInt32(txtQTDDesp.Text);
                            pda.PEDA_VALOR_UNITARIO = Convert.ToDouble(valor);
                            pda.PEDA_VALOR = pda.PEDA_QUANTIDADE * pda.PEDA_VALOR_UNITARIO;
                            pda.DUPLICATA = null;

                            if (idPessoa == 0)
                                ListaPessoaDespesa.Add(pda);
                            else
                            {
                                pda.PESSOA = ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == idPessoa);
                                ctx.AddToPESSOA_DESPESA_AVULSA(pda);
                                ctx.SaveChanges();
                            }
                        }
                        else
                        {
                            int index = Convert.ToInt32(hfIndexDesp.Value);
                            if (idPessoa == 0)
                            {
                                int catID = Convert.ToInt32(ddlCatFincaneiro.SelectedValue);

                                ListaPessoaDespesa[index].CATEGORIA_FINANCEIRO = ctx.CATEGORIA_FINANCEIRO.FirstOrDefault(p => p.CAFI_PK_ID == catID);
                                ListaPessoaDespesa[index].PEDA_DATA = DateTimeNulo(txtDataDesp.Text);
                                ListaPessoaDespesa[index].PEDA_QUANTIDADE = intNulo(txtQTDDesp.Text);
                                ListaPessoaDespesa[index].PEDA_VALOR_UNITARIO = doubleNulo(txtValorDesp.Text);
                                ListaPessoaDespesa[index].PEDA_VALOR = ListaPessoaDespesa[index].PEDA_QUANTIDADE * ListaPessoaDespesa[index].PEDA_VALOR_UNITARIO;
                                ListaPessoaDespesa[index].DUPLICATA = null;
                            }
                            else
                            {
                                var _entity = ctx.PESSOA_DESPESA_AVULSA.FirstOrDefault(x => x.PEDA_PK_ID == index);
                                int cateID = Convert.ToInt32(ddlCatFincaneiro.SelectedValue);
                                _entity.CATEGORIA_FINANCEIRO = ctx.CATEGORIA_FINANCEIRO.FirstOrDefault(p => p.CAFI_PK_ID == cateID);
                                _entity.PEDA_DATA = DateTimeNulo(txtDataDesp.Text);
                                _entity.PEDA_QUANTIDADE = intNulo(txtQTDDesp.Text);
                                _entity.PEDA_VALOR_UNITARIO = doubleNulo(txtValorDesp.Text);
                                _entity.PEDA_VALOR = _entity.PEDA_QUANTIDADE * _entity.PEDA_VALOR_UNITARIO;
                                _entity.DUPLICATA = null;
                                ctx.SaveChanges();
                            }
                        }
                    }
                }
                else
                {
                    jsAlert(upModalDesp, "despesainvalida", "Coloque um valor válido.");
                    txtValorDesp.Focus();
                    return;
                }
            }

            bindDespesas();
            ddlCatFincaneiro.SelectedIndex = -1;
            txtDataDesp.Text = string.Empty;
            txtQTDDesp.Text = string.Empty;
            txtValorDesp.Text = string.Empty;
            lblTotalDesp.Text = string.Empty;
            hfIndexDesp.Value = string.Empty;
            ScriptManager.RegisterClientScriptBlock(upModalDesp, upModalDesp.GetType(), "fechamodaldesp", "$('#fecharDesp').trigger('click')", true);
            upDespesas.Update();
            Ajax.JavascriptExecute(upDespesas, "btnGeraBoletoEvent();");
        }

        private void bindDespesas()
        {
            if (Request.QueryString["PESS_PK_ID"] == null)
            {
                lvDespesas.DataSource = ListaPessoaDespesa;
                lvDespesas.DataBind();
            }
            else
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    var pk = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);

                    lvDespesas.DataSource = ctx.PESSOA_DESPESA_AVULSA.Where(x => x.PESSOA.PESS_PK_ID == pk && x.DUPLICATA == null);
                    lvDespesas.DataBind();
                }

            upDespesas.Update();
            verificaListaDespesa();
        }

        protected void editar_responsavel(object sender, CommandEventArgs e)
        {
            setValAcao = 1;
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_RESPONSAVEL item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.PESSOA_RESPONSAVEL.Where(x => x.PERE_PK_ID == index).FirstOrDefault();
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaPesResp[index];
                }
                txtResp.Text = item.PESSOA_FISICA.PESSOA.PESS_NOME.ToString();
                RespFinan.Checked = item.PERE_RESPFIN;
            }

            hfIDresp.Value = index.ToString();

            phRespNome.Visible = false;

            ScriptManager.RegisterClientScriptBlock(upModalResp, upModalResp.GetType(), "abremodalResp", "$('#modalResp').modal('show');", true);
            upModalResp.Update();
        }


        protected void editar_despesa(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_DESPESA_AVULSA item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.PESSOA_DESPESA_AVULSA.Include("CATEGORIA_FINANCEIRO").FirstOrDefault(x => x.PEDA_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaPessoaDespesa[index];
                }
            }

            txtDataDesp.Text = item.PEDA_DATA.ToString();
            txtQTDDesp.Text = item.PEDA_QUANTIDADE != null ? item.PEDA_QUANTIDADE.Value.ToString("F0") : "0";
            txtValorDesp.Text = item.PEDA_VALOR_UNITARIO != null ? item.PEDA_VALOR_UNITARIO.Value.ToString("F2") : "0,00";
            lblTotalDesp.Text = item.PEDA_VALOR != null ? item.PEDA_VALOR.Value.ToString("F2") : "0,00";
            ddlCatFincaneiro.SelectedValue = item.CATEGORIA_FINANCEIRO.CAFI_PK_ID.ToString();
            hfIndexDesp.Value = index.ToString();

            ScriptManager.RegisterClientScriptBlock(upModalDesp, upModalDesp.GetType(), "abremodalDesp", "$('#modalDesp').modal('show');", true);
            upModalDesp.Update();
            Ajax.JavascriptExecute(upDespesas, "btnGeraBoletoEvent();");
        }
        protected void deletar_despesa(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_DESPESA_AVULSA item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.PESSOA_DESPESA_AVULSA.FirstOrDefault(x => x.PEDA_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaPessoaDespesa[index];
                }
                if (item.PEDA_PK_ID != 0)
                {
                    ctx.DeleteObject(item);
                    ctx.SaveChanges();
                }
                else
                    ListaPessoaDespesa.Remove(item);
            }
            bindDespesas();
            Ajax.JavascriptExecute(upDespesas, "btnGeraBoletoEvent();");
        }

        #endregion

        #region CRUD Servicos Oferecidos
        protected void salvarServ(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtDtIniServ.Text) || string.IsNullOrEmpty(txtDtFimServ.Text))
            {
                jsAlert(upModalServ, "servicoinvalido", "Preencha todos os campos");
                ddlCategFinanServ.Focus();
                return;
            }
            else
            {
                if (Validacoes.ValidaCampoDecimal(txtValorServ.Text))
                {
                    using (FederacaoEntities ctx = new FederacaoEntities())
                    {
                        bool isInsert = string.IsNullOrEmpty(hfIndexServ.Value);
                        if (isInsert)
                        {
                            CONTRATO_SERVICO cs = new CONTRATO_SERVICO();

                            float? valor = Convert.ToSingle(txtValorServ.Text);

                            int catFinanceira = Convert.ToInt32(ddlCategFinanServ.SelectedValue);
                            cs.CATEGORIA_FINANCEIRO = ctx.CATEGORIA_FINANCEIRO.FirstOrDefault(x => x.CAFI_PK_ID == catFinanceira);
                            cs.COSE_DATA_INI = DateTimeNulo(txtDtIniServ.Text);
                            cs.COSE_DATA_FIM = DateTimeNulo(txtDtFimServ.Text);
                            //cs.COSE_STATUS = Convert.ToInt32(ddlStatusServ.SelectedValue);
                            cs.COSE_VALOR = valor;
                            cs.DUPLICATA_COMPOSICAO = null;

                            if (idPessoa == 0)
                                ListaContratoPessoa.Add(cs);
                            else
                            {
                                cs.PESSOA = ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == idPessoa);
                                ctx.AddToCONTRATO_SERVICO(cs);
                                ctx.SaveChanges();
                            }
                        }
                        else
                        {
                            int index = Convert.ToInt32(hfIndexServ.Value);
                            if (idPessoa == 0)
                            {
                                int catID = Convert.ToInt32(ddlCatFincaneiro.SelectedValue);

                                ListaContratoPessoa[index].CATEGORIA_FINANCEIRO = ctx.CATEGORIA_FINANCEIRO.FirstOrDefault(p => p.CAFI_PK_ID == catID);
                                ListaContratoPessoa[index].COSE_DATA_INI = DateTimeNulo(txtDtIniServ.Text);
                                ListaContratoPessoa[index].COSE_DATA_FIM = DateTimeNulo(txtDtFimServ.Text);
                                ListaContratoPessoa[index].COSE_VALOR = Convert.ToSingle(txtValorServ.Text);
                                //ListaContratoPessoa[index].COSE_STATUS = Convert.ToInt32(ddlStatusServ.SelectedValue);
                                ListaContratoPessoa[index].DUPLICATA_COMPOSICAO = null;
                            }
                            else
                            {
                                var _entity = ctx.CONTRATO_SERVICO.FirstOrDefault(x => x.COSE_PK_ID == index);
                                int cateID = Convert.ToInt32(ddlCategFinanServ.SelectedValue);
                                _entity.CATEGORIA_FINANCEIRO = ctx.CATEGORIA_FINANCEIRO.FirstOrDefault(p => p.CAFI_PK_ID == cateID);
                                _entity.COSE_DATA_INI = DateTimeNulo(txtDtIniServ.Text);
                                _entity.COSE_DATA_FIM = DateTimeNulo(txtDtFimServ.Text);
                                _entity.COSE_VALOR = Convert.ToSingle(txtValorServ.Text);

                                var dupcomp = ctx.DUPLICATA_COMPOSICAO.Where(p => p.CONTRATO_SERVICO.COSE_PK_ID == _entity.COSE_PK_ID).FirstOrDefault();
                                dupcomp.DUCO_VALOR = Convert.ToSingle(txtValorServ.Text);
                                ctx.SaveChanges();

                                var dup = ctx.DUPLICATA_COMPOSICAO.Where(p => p.CONTRATO_SERVICO.COSE_PK_ID == _entity.COSE_PK_ID).FirstOrDefault().DUPLICATA;
                                dup.DUPL_VALOR_BRUTO = ctx.DUPLICATA_COMPOSICAO.Where(p => p.CATEGORIA_FINANCEIRO.CAFI_PK_ID == _entity.CATEGORIA_FINANCEIRO.CAFI_PK_ID).ToList().Sum(x => x.DUCO_VALOR);
                                ctx.SaveChanges();
                            }
                        }
                    }
                }
                else
                {
                    jsAlert(upModalServ, "servicoinvalido", "Coloque um valor válido.");
                    txtValorServ.Focus();
                    return;
                }
            }

            bindServicos();
            ddlCategFinanServ.SelectedIndex = -1;
            txtDtIniServ.Text = string.Empty;
            txtDtFimServ.Text = string.Empty;
            txtValorServ.Text = string.Empty;
            hfIndexServ.Value = string.Empty;
            ScriptManager.RegisterClientScriptBlock(upModalServ, upModalServ.GetType(), "fechamodalserv", "$('#fecharServ').trigger('click')", true);
            upServ.Update();
            Ajax.JavascriptExecute(upServ, "btnGeraBoletoServEvent();");
        }

        private void bindServicos()
        {
            List<Servicos> lstConSer = new List<Servicos>();
            Servicos serv = null;
            if (Request.QueryString["PESS_PK_ID"] == null)
            {
                lvServico.DataSource = ListaContratoPessoa;
                lvServico.DataBind();
            }
            else
            {
                using (FederacaoEntities ctx = new FederacaoEntities())
                {

                    var pk = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);
                    var lstContratoServico = ctx.CONTRATO_SERVICO.Where(x => x.PESSOA.PESS_PK_ID == pk).ToList();
                    DateTime? datapagamento = null;
                    foreach (var item in lstContratoServico)
                    {
                        serv = new Servicos();
                        serv.COSE_PK_ID = item.COSE_PK_ID;
                        serv.COSE_DATA_INI = Convert.ToDateTime(item.COSE_DATA_INI);
                        serv.COSE_DATA_FIM = Convert.ToDateTime(item.COSE_DATA_FIM);
                        serv.COSE_FK_CAF = item.CATEGORIA_FINANCEIRO.CAFI_PK_ID;
                        serv.CAFI_DESCRICAO = item.CATEGORIA_FINANCEIRO.CAFI_DESCRICAO;
                        serv.COSE_VALOR = item.COSE_VALOR;

                        if (ctx.DUPLICATA_COMPOSICAO.Where(p => p.CONTRATO_SERVICO.COSE_PK_ID == item.COSE_PK_ID).FirstOrDefault() != null)
                        {
                            serv.DUPL_PK_ID = ctx.DUPLICATA_COMPOSICAO.Where(p => p.CONTRATO_SERVICO.COSE_PK_ID == item.COSE_PK_ID).FirstOrDefault().DUPLICATA.DUPL_PK_ID;
                            datapagamento = ctx.DUPLICATA.Where(f => f.DUPL_PK_ID == serv.DUPL_PK_ID).FirstOrDefault().DUPL_DATA_PAGTO;
                        }

                        if (DateTime.Today >= serv.COSE_DATA_INI && DateTime.Today <= serv.COSE_DATA_FIM)
                        {
                            serv.COSE_STATUS = status(1);
                        }
                        else if (serv.DUPL_PK_ID > 0 && datapagamento == null)
                        {
                            serv.COSE_STATUS = status(2);
                        }
                        else if (DateTime.Today >= serv.COSE_DATA_FIM)
                        {
                            serv.COSE_STATUS = status(3);
                        }

                        lstConSer.Add(serv);
                    }
                }
                lvServico.DataSource = lstConSer.ToList();
                lvServico.DataBind();
            }
            verificaListaServico();
            upServ.Update();
            Ajax.JavascriptExecute(upServ, "btnGeraBoletoServEvent();");
        }

        protected void editar_servico(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            CONTRATO_SERVICO item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.CONTRATO_SERVICO.Include("Duplicata_Composicao").FirstOrDefault(x => x.COSE_PK_ID == index);
                    item = ctx.CONTRATO_SERVICO.Include("CATEGORIA_FINANCEIRO").FirstOrDefault(x => x.COSE_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaContratoPessoa[index];
                }
                ddlCategFinanServ.DataSource = ctx.CATEGORIA_FINANCEIRO.Where(x => x.CAFI_ATIVO && x.CONTA_BANCARIA.PESSOAPrincipal.PESS_PK_ID == Utilitarios.UsuarioLogado.ENTIDADE.ENTI_PK_FK_PEJU).Select(x => new { x.CAFI_PK_ID, x.CAFI_DESCRICAO });
                ddlCategFinanServ.DataBind();
                ddlCategFinanServ.Items.Insert(0, new ListItem("--Selecione--", String.Empty));

                //Atualiza Duplicata Composição
                var serv = ctx.CONTRATO_SERVICO.Where(x => x.COSE_PK_ID == index).FirstOrDefault();
                var dupcomp = ctx.DUPLICATA_COMPOSICAO.Where(x => x.CONTRATO_SERVICO.COSE_PK_ID == index).FirstOrDefault();
                dupcomp.DUCO_VALOR = item.COSE_VALOR == null ? 0 : Convert.ToDouble(item.COSE_VALOR);
                dupcomp.DUPLICATA.DUPL_VALOR_BRUTO = ctx.DUPLICATA_COMPOSICAO.Where(p => p.CATEGORIA_FINANCEIRO.CAFI_PK_ID == serv.CATEGORIA_FINANCEIRO.CAFI_PK_ID).ToList().Sum(x => x.DUCO_VALOR);

            }

            txtDtIniServ.Text = item.COSE_DATA_INI.ToString();
            txtDtFimServ.Text = item.COSE_DATA_FIM.ToString();
            txtValorServ.Text = item.COSE_VALOR.ToString();
            ddlCategFinanServ.SelectedValue = item.CATEGORIA_FINANCEIRO.CAFI_PK_ID.ToString();

            //ddlStatusServ.SelectedValue = item.COSE_STATUS.ToString();
            hfIndexServ.Value = index.ToString();

            ScriptManager.RegisterClientScriptBlock(upModalServ, upModalServ.GetType(), "abremodalServ", "$('#modalServ').modal('show');", true);
            upModalServ.Update();
            Ajax.JavascriptExecute(upServ, "btnGeraBoletoServEvent();");
        }
        /// <summary>
        /// Deletar serviço entidade
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void deletar_servico(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            CONTRATO_SERVICO item;
            DUPLICATA_COMPOSICAO dup_comp;

            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.CONTRATO_SERVICO.FirstOrDefault(x => x.COSE_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaContratoPessoa[index];
                }


                if (item.COSE_PK_ID != 0)
                {
                    DUPLICATA dup = new DUPLICATA();
                    dup_comp = ctx.DUPLICATA_COMPOSICAO.Where(p => p.CONTRATO_SERVICO.COSE_PK_ID == item.COSE_PK_ID).FirstOrDefault();
                    if (dup_comp != null)
                    {
                        double? valor = 0;
                        var serv = ctx.CONTRATO_SERVICO.Where(x => x.COSE_PK_ID == index).FirstOrDefault();
                        valor = dup_comp.DUPLICATA.DUPL_VALOR_BRUTO - dup_comp.DUCO_VALOR;
                        if (valor != null && valor > 0)
                        {
                            dup_comp.DUPLICATA.DUPL_VALOR_BRUTO = valor;
                        }
                        dup_comp.DUPLICATA.DUPL_SHOPLINE = false;
                        dup = dup_comp.DUPLICATA;
                        ctx.SaveChanges();
                        ctx.DeleteObject(dup_comp);

                        if (valor != null && valor == 0)
                        {
                            ctx.DeleteObject(dup);
                        }
                    }

                    ctx.DeleteObject(item);
                    ctx.SaveChanges();

                }
                else
                    ListaContratoPessoa.Remove(item);
            }
            bindServicos();
            Ajax.JavascriptExecute(upServ, "btnGeraBoletoServEvent();");
            Ajax.JavascriptExecute(upHistFinan, "DispararBusca();");
            upHistFinan.Update();
        }

        #endregion

        #region CRUD_NOME
        protected bool VerificaNome(List<PESSOA_NOME> nomes, DateTime? DataIni, DateTime? DataFim, int? indice)
        {
            //Verifica se já não há outro nome atual
            if (DataFim == null && nomes.FirstOrDefault(p => p.PENO_DATA_FIM == null && (p.PENO_PK_ID != indice || indice == null)) != null)
            {
                Ajax.JavascriptAlert(upModalNome, "Não é possível adicionar dois nomes atuais.");
                return false;
            }
            //Verifica se já não há outro nome nesse período
            if (nomes.Any(p =>
                    (
                        (p.PENO_DATA_INI <= DataIni && p.PENO_DATA_FIM >= DataIni) ||
                        (p.PENO_DATA_INI <= DataFim && p.PENO_DATA_FIM >= DataFim)
                    ) &&
                    (p.PENO_PK_ID != indice || indice == null)))
            {
                Ajax.JavascriptAlert(upModalNome, "Já existe um nome cadastrado no período informado.");
                return false;
            }

            return true;
        }

        protected void SalvarNome_Click(object sender, EventArgs e)
        {
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                bool isInsert = string.IsNullOrEmpty(hfIndexNome.Value);
                if (isInsert)
                {
                    PESSOA_NOME nome = new PESSOA_NOME();

                    nome.PENO_NOME = txtNome.Text;
                    nome.PENO_APELIDO = txtApelido.Text;
                    nome.PENO_NOME_FANTASIA = (isPessoaFisica) ? txtNome.Text : txtNomeFantasia.Text;
                    nome.PENO_EXIBIR_NOME = Convert.ToByte(ddlNomeExibir.SelectedValue);
                    nome.PENO_DATA_INI = Convert.ToDateTime(txtDataNome.Text);
                    nome.PENO_DATA_FIM = Texto.ConvertToDateTime(txtDataFimNome.Text);

                    if (idPessoa == 0)
                    {
                        if (VerificaNome(ListaPesNom, nome.PENO_DATA_INI, nome.PENO_DATA_FIM, null))
                            ListaPesNom.Add(nome);
                    }
                    else
                    {
                        var pes = ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == idPessoa);

                        if (VerificaNome(pes.PESSOA_NOME.ToList(), nome.PENO_DATA_INI, nome.PENO_DATA_FIM, null))
                        {
                            nome.PESSOA = pes;
                            ctx.AddToPESSOA_NOME(nome);
                            ctx.SaveChanges();
                        }
                    }
                }
                else
                {
                    int index = Convert.ToInt32(hfIndexNome.Value);
                    if (idPessoa == 0)
                    {
                        ListaPesNom[index].PENO_NOME = txtNome.Text;
                        ListaPesNom[index].PENO_NOME_FANTASIA = txtNomeFantasia.Text;
                        ListaPesNom[index].PENO_EXIBIR_NOME = Convert.ToByte(ddlNomeExibir.SelectedValue);
                        ListaPesNom[index].PENO_APELIDO = txtApelido.Text;
                        ListaPesNom[index].PENO_DATA_INI = Convert.ToDateTime(txtDataNome.Text);
                        ListaPesNom[index].PENO_DATA_FIM = Texto.ConvertToDateTime(txtDataFimNome.Text);
                    }
                    else
                    {
                        var _entity = ctx.PESSOA_NOME.FirstOrDefault(x => x.PENO_PK_ID == index);
                        _entity.PENO_DATA_INI = Convert.ToDateTime(txtDataNome.Text);
                        _entity.PENO_DATA_FIM = Texto.ConvertToDateTime(txtDataFimNome.Text);

                        if (VerificaNome(_entity.PESSOA.PESSOA_NOME.ToList(), _entity.PENO_DATA_INI, _entity.PENO_DATA_FIM, index))
                        {
                            _entity.PENO_NOME = txtNome.Text;
                            _entity.PENO_NOME_FANTASIA = txtNomeFantasia.Text;
                            _entity.PENO_EXIBIR_NOME = Convert.ToByte(ddlNomeExibir.SelectedValue);
                            _entity.PENO_APELIDO = txtApelido.Text;
                            ctx.SaveChanges();
                        }
                    }
                }
            }
            bindNomes();
            txtNome.Text = txtApelido.Text = txtDataNome.Text = txtDataFimNome.Text = hfIndexNome.Value = string.Empty;
            Ajax.JavascriptExecute(upModalNome, "$('#modalNome').modal('hide');");
            upModalNome.Update();
        }
        protected void editar_nome(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_NOME item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.PESSOA_NOME.FirstOrDefault(x => x.PENO_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaPesNom[index];
                }
            }

            txtNome.Text = item.PENO_NOME;
            txtApelido.Text = item.PENO_APELIDO;
            txtNomeFantasia.Text = item.PENO_NOME_FANTASIA;
            ddlNomeExibir.SelectedValue = item.PENO_EXIBIR_NOME.ToString();
            txtDataNome.Text = item.PENO_DATA_INI.ToString("dd/MM/yyyy");
            txtDataFimNome.Text = (item.PENO_DATA_FIM != null) ? item.PENO_DATA_FIM.Value.ToString("dd/MM/yyyy") : String.Empty;
            hfIndexNome.Value = index.ToString();

            Ajax.JavascriptExecute(upModalNome, "$('#modalNome').modal('show');");
            upModalNome.Update();
            bindNomes();
        }
        protected void deletar_nome(object sender, CommandEventArgs e)
        {
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfPKObj");
            PESSOA_NOME item;
            int index;
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    item = ctx.PESSOA_NOME.FirstOrDefault(x => x.PENO_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    item = ListaPesNom[index];
                }
                if (item.PENO_PK_ID != 0)
                {
                    ctx.DeleteObject(item);
                    ctx.SaveChanges();
                }
                else
                    ListaPesNom.Remove(item);
            }
            bindNomes();
        }
        private void bindNomes()
        {
            if (Request.QueryString["PESS_PK_ID"] == null)
            {
                if (hfTipoPessoa.Value == "F")
                {
                    lvNomes.DataSource = ListaPesNom;
                    lvNomes.DataBind();
                    upListaNomes.Update();
                }
                else
                {
                    lvNomesJur.DataSource = ListaPesNom;
                    lvNomesJur.DataBind();
                    upListaNomesJur.Update();
                }
            }
            else
            {
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    if (hfTipoPessoa.Value == "F")
                    {
                        lvNomes.DataSource = ctx.PESSOA_NOME.Where(x => x.PESSOA.PESS_PK_ID == Pessoa.PESS_PK_ID);
                        lvNomes.DataBind();
                        upListaNomes.Update();
                    }
                    else
                    {
                        lvNomesJur.DataSource = ctx.PESSOA_NOME.Where(x => x.PESSOA.PESS_PK_ID == Pessoa.PESS_PK_ID);
                        lvNomesJur.DataBind();
                        upListaNomesJur.Update();
                    }
                }
            }
        }
        #endregion

        #region CRUD TELEFONE_EMERGENCIA
        protected void salvarTelEmergencia(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtTelEmergencia.Text))
            {
                jsAlert(upModalTel, "telvazio", "Preencha o telefone");
                txtTel.Focus();
                return;
            }

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                bool isInsert = string.IsNullOrEmpty(hfIndexTelEmergencia.Value);
                if (isInsert)
                {
                    var _entity = new PESSOA_FISICA_CONTATO_EMERGENCIA();

                    _entity.PFCE_NOME = txtNomeEmergencia.Text;
                    _entity.PFCE_TELEFONE = stringNula(txtTelEmergencia.Text);
                    if (idPessoa == 0)
                        ListaPesTelEmer.Add(_entity);
                    else
                    {
                        _entity.PESSOA_FISICA = ctx.PESSOA_FISICA.FirstOrDefault(x => x.PESSOA.PESS_PK_ID == idPessoa);
                        ctx.AddToPESSOA_FISICA_CONTATO_EMERGENCIA(_entity);
                        ctx.SaveChanges();
                    }
                }
                else
                {
                    int index = Convert.ToInt32(hfIndexTelEmergencia.Value);

                    if (idPessoa == 0)
                    {
                        var _entity = ListaPesTelEmer[index];
                        _entity.PFCE_NOME = txtNomeEmergencia.Text;
                        _entity.PFCE_TELEFONE = stringNula(txtTelEmergencia.Text);
                    }
                    else
                    {
                        var _entity = ctx.PESSOA_FISICA_CONTATO_EMERGENCIA.FirstOrDefault(x => x.PFCE_PK_ID == index);
                        _entity.PFCE_NOME = txtNomeEmergencia.Text;
                        _entity.PFCE_TELEFONE = stringNula(txtTelEmergencia.Text);
                        ctx.SaveChanges();
                    }
                }
            }
            bindTelefonesEmer();

            txtNomeEmergencia.Text = string.Empty;
            hfIndexTelEmergencia.Value = string.Empty;
            ScriptManager.RegisterClientScriptBlock(upContatosEmergencia, upContatosEmergencia.GetType(), "fechamodaltelEmer", "$('#fechartelEmer').trigger('click');"
            , true);
        }
        protected void editar_TelEmergencia(object sender, CommandEventArgs e)
        {
            int index;
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfContEmer");
            PESSOA_FISICA_CONTATO_EMERGENCIA _entity;

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    _entity = ctx.PESSOA_FISICA_CONTATO_EMERGENCIA.FirstOrDefault(x => x.PFCE_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    _entity = ListaPesTelEmer[index];
                }
                txtTelEmergencia.Text = _entity.PFCE_TELEFONE;
                txtNomeEmergencia.Text = _entity.PFCE_NOME;
            }

            hfIndexTelEmergencia.Value = index.ToString();
            ScriptManager.RegisterClientScriptBlock(upContatosEmergencia, upContatosEmergencia.GetType(), "abremodaltelEmer",
                "$('#modalTelDadosMedicos').modal('show');",
                true);
            upTelDadosMedicos.Update();
        }
        protected void deletar_TelEmergencia(object sender, CommandEventArgs e)
        {
            int index;
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfContEmer");
            PESSOA_FISICA_CONTATO_EMERGENCIA _entity;

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    _entity = ctx.PESSOA_FISICA_CONTATO_EMERGENCIA.FirstOrDefault(x => x.PFCE_PK_ID == index);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    _entity = ListaPesTelEmer[index];
                }

                if (_entity.PFCE_PK_ID != 0)
                {
                    ctx.DeleteObject(_entity);
                    ctx.SaveChanges();
                }
                else
                    ListaPesTelEmer.Remove(_entity);
            }
            bindTelefonesEmer();
        }
        private void bindTelefonesEmer()
        {
            if (Request.QueryString["PESS_PK_ID"] == null)
            {
                lvContatosEmergencia.DataSource = ListaPesTelEmer;
                lvContatosEmergencia.DataBind();
            }
            else
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    var pk = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);

                    lvContatosEmergencia.DataSource = ctx.PESSOA_FISICA_CONTATO_EMERGENCIA.Where(x => x.PESSOA_FISICA.PEFI_PK_FK_PESS == pk);
                    lvContatosEmergencia.DataBind();
                }
            upContatosEmergencia.Update();
        }
        protected void btnIncContEmer_Click(object sender, EventArgs e)
        {
            txtNomeEmergencia.Text = string.Empty;
            txtTelEmergencia.Text = string.Empty;
            Ajax.JavascriptExecute(upTelDadosMedicos, "$('#modalTelDadosMedicos').modal('show');");
            upTelDadosMedicos.Update();
        }
        #endregion

        #region CRUD HOSPITAIS
        protected void salvarHosp(object sender, EventArgs e)
        {
            int idHosp = Convert.ToInt32(hfIDhosp.Value);
            if (ListaHospitais.Any(x => x.HOSPITAL.HOSP_PK_FK_PEJU == idHosp))
            {
                jsAlert(upModalResp, "errohosp", "O hospital selecionado ja existe na lista");
                txtHospitais.Text = string.Empty;
                hfIDhosp.Value = string.Empty;
                return;
            }

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                bool isInsert = string.IsNullOrEmpty(hfIndexHospital.Value);
                if (isInsert)
                {
                    var PesHosp = new PESSOA_FISICA_HOSPITAL();

                    PesHosp.HOSPITAL = ctx.HOSPITAL.FirstOrDefault(x => x.HOSP_PK_FK_PEJU == idHosp);

                    if (idPessoa == 0)
                        ListaHospitais.Add(PesHosp);
                    else
                    {
                        PesHosp.PESSOA_FISICA = ctx.PESSOA_FISICA.FirstOrDefault(x => x.PESSOA.PESS_PK_ID == idPessoa);
                        ctx.AddToPESSOA_FISICA_HOSPITAL(PesHosp);
                        ctx.SaveChanges();
                    }
                }
                else
                {
                    int index = Convert.ToInt32(hfIndexHospital.Value);

                    if (idPessoa == 0)
                    {
                        var PesHosp = ListaHospitais[index];
                        PesHosp.HOSPITAL = ctx.HOSPITAL.FirstOrDefault(x => x.HOSP_PK_FK_PEJU == idHosp);
                    }
                    else
                    {
                        var PesHosp = ctx.PESSOA_FISICA_HOSPITAL.FirstOrDefault(x => x.HOSPITAL.PESSOA_JURIDICA.PEJU_PK_FK_PESS == index && x.PESSOA_FISICA.PEFI_PK_FK_PESS == idPessoa);
                        PesHosp.HOSPITAL = ctx.HOSPITAL.FirstOrDefault(x => x.HOSP_PK_FK_PEJU == idHosp);
                        ctx.SaveChanges();
                    }
                }

                //Limpar os campos
                txtHospitais.Text = string.Empty;
                hfIndexHospital.Value = string.Empty;
                bindHospitais();
                ScriptManager.RegisterClientScriptBlock(upHospitais, upHospitais.GetType(), "fechamodalhosp", "$('#fecharhosp').trigger('click')", true);
            }
        }
        protected void editar_Hospitais(object sender, CommandEventArgs e)
        {
            int index;
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfHospital");
            PESSOA_FISICA_HOSPITAL _entity;

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    _entity = ctx.PESSOA_FISICA_HOSPITAL.FirstOrDefault(x => x.HOSPITAL.PESSOA_JURIDICA.PEJU_PK_FK_PESS == index && x.PESSOA_FISICA.PEFI_PK_FK_PESS == idPessoa);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    _entity = ListaHospitais[index];
                }
                txtHospitais.Text = _entity.HOSPITAL.PESSOA_JURIDICA.PESSOA.PESS_NOME.ToString();
                hfIDhosp.Value = _entity.HOSPITAL.ToString();
            }

            hfIndexHospital.Value = index.ToString();
            ScriptManager.RegisterClientScriptBlock(upHospitais, upHospitais.GetType(), "abremodalHosp",
                "$('#modalHospDadosMedicos').modal('show');", true);
            upHospDadosMedicos.Update();
        }
        protected void deletar_Hospitais(object sender, CommandEventArgs e)
        {
            int index;
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfHospital");
            PESSOA_FISICA_HOSPITAL _entity;

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    _entity = ctx.PESSOA_FISICA_HOSPITAL.FirstOrDefault(x => x.HOSPITAL.PESSOA_JURIDICA.PEJU_PK_FK_PESS == index && x.PESSOA_FISICA.PEFI_PK_FK_PESS == idPessoa);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    _entity = ListaHospitais[index];
                }

                if (_entity.PFHO_PK_ID != 0)
                {
                    ctx.DeleteObject(_entity);
                    ctx.SaveChanges();
                }
                else
                    ListaHospitais.Remove(_entity);
            }
            bindHospitais();
        }
        private void bindHospitais()
        {
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (Request.QueryString["PESS_PK_ID"] == null)
                {
                    var pesHosp = new List<PESSOA>();
                    foreach (var item in ListaHospitais.Select(x => new { x.HOSPITAL.PESSOA_JURIDICA.PESSOA.PESS_PK_ID, x.HOSPITAL.PESSOA_JURIDICA.PESSOA.PESSOA_NOME }))
                    {
                        pesHosp.Add(ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == item.PESS_PK_ID));
                    }

                    lvHospitais.DataSource = pesHosp;
                    lvHospitais.DataBind();
                }
                else
                {
                    var pk = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);

                    var pesHosp = new List<PESSOA>();
                    foreach (var item in ctx.PESSOA_FISICA_HOSPITAL.Where(x => x.PESSOA_FISICA.PEFI_PK_FK_PESS == pk))
                    {
                        pesHosp.Add(ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == item.HOSPITAL.PESSOA_JURIDICA.PEJU_PK_FK_PESS));
                    }

                    lvHospitais.DataSource = pesHosp;
                    lvHospitais.DataBind();
                }
            }
            upHospitais.Update();
        }
        protected void btnHospitais_Click(object sender, EventArgs e)
        {
            txtHospitais.Text = string.Empty;
            Ajax.JavascriptExecute(upHospDadosMedicos, "$('#modalHospDadosMedicos').modal('show');");
            upHospDadosMedicos.Update();
        }
        #endregion

        #region MEDICACOES
        protected void lkbMedicacoes_Click(object sender, EventArgs e)
        {
            int idReme = Convert.ToInt32(ddlMedicacoes.SelectedValue);
            if (ListaMedicacoes.Any(x => x.REMEDIO.REME_PK_ID == idReme))
            {
                jsAlert(upModalResp, "errohosp", "A medicação selecionada já existe na lista");
                return;
            }

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                var PesMed = new PESSOA_FISICA_REMEDIO();

                PesMed.REMEDIO = ctx.REMEDIO.FirstOrDefault(x => x.REME_PK_ID == idReme);

                if (idPessoa == 0)
                    ListaMedicacoes.Add(PesMed);
                else
                {
                    PesMed.PESSOA_FISICA = ctx.PESSOA_FISICA.FirstOrDefault(x => x.PESSOA.PESS_PK_ID == idPessoa);
                    ctx.AddToPESSOA_FISICA_REMEDIO(PesMed);
                    ctx.SaveChanges();
                }

                bindHospitais();
            }
        }
        protected void deletar_Medicacoes(object sender, CommandEventArgs e)
        {
            int index;
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfMedicacoes");
            PESSOA_FISICA_REMEDIO _entity;

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    _entity = ctx.PESSOA_FISICA_REMEDIO.FirstOrDefault(x => x.REMEDIO.REME_PK_ID == index && x.PESSOA_FISICA.PEFI_PK_FK_PESS == idPessoa);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    _entity = ListaMedicacoes[index];
                }

                if (_entity.PFRE_PK_ID != 0)
                {
                    ctx.DeleteObject(_entity);
                    ctx.SaveChanges();
                }
                else
                    ListaMedicacoes.Remove(_entity);
            }
            bindMedicacoes();
        }
        private void bindMedicacoes()
        {
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (Request.QueryString["PESS_PK_ID"] == null)
                {
                    var pesMed = new List<REMEDIO>();
                    foreach (var item in ListaMedicacoes)
                    {
                        pesMed.Add(ctx.REMEDIO.FirstOrDefault(x => x.REME_PK_ID == item.REMEDIO.REME_PK_ID));
                    }

                    lvMedicacoes.DataSource = pesMed;
                    lvMedicacoes.DataBind();
                }
                else
                {
                    var pk = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);

                    var pesMed = new List<REMEDIO>();
                    foreach (var item in ctx.PESSOA_FISICA_REMEDIO.Where(x => x.PESSOA_FISICA.PEFI_PK_FK_PESS == pk))
                    {
                        pesMed.Add(ctx.REMEDIO.FirstOrDefault(x => x.REME_PK_ID == item.REMEDIO.REME_PK_ID));
                    }

                    lvMedicacoes.DataSource = pesMed;
                    lvMedicacoes.DataBind();
                }
            }
            upMedicacoes.Update();
        }
        #endregion

        #region ALERGIAS
        protected void lkbAlergias_Click(object sender, EventArgs e)
        {
            int idAler = Convert.ToInt32(ddlAlergias.SelectedValue);
            if (ListaAlergias.Any(x => x.ALERGIA.ALER_PK_ID == idAler))
            {
                jsAlert(upTabAlergias, "erroaler", "A alergia selecionada já existe na lista");
                return;
            }

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                var PesAler = new PESSOA_FISICA_ALERGIA();

                PesAler.ALERGIA = ctx.ALERGIA.FirstOrDefault(x => x.ALER_PK_ID == idAler);

                if (idPessoa == 0)
                    ListaAlergias.Add(PesAler);
                else
                {
                    PesAler.PESSOA_FISICA = ctx.PESSOA_FISICA.FirstOrDefault(x => x.PESSOA.PESS_PK_ID == idPessoa);
                    ctx.AddToPESSOA_FISICA_ALERGIA(PesAler);
                    ctx.SaveChanges();
                }

                bindAlergias();
            }
        }
        protected void deletar_Alergias(object sender, CommandEventArgs e)
        {
            int index;
            var hf = (HiddenField)((LinkButton)sender).Parent.FindControl("hfAlergias");
            PESSOA_FISICA_ALERGIA _entity;

            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (!hf.Value.Equals(string.Empty))
                {
                    index = Convert.ToInt32(hf.Value);
                    _entity = ctx.PESSOA_FISICA_ALERGIA.FirstOrDefault(x => x.ALERGIA.ALER_PK_ID == index && x.PESSOA_FISICA.PEFI_PK_FK_PESS == idPessoa);
                }
                else
                {
                    index = Convert.ToInt32(e.CommandArgument);
                    _entity = ListaAlergias[index];
                }

                if (_entity.PFAL_PK_ID != 0)
                {
                    ctx.DeleteObject(_entity);
                    ctx.SaveChanges();
                }
                else
                    ListaAlergias.Remove(_entity);
            }
            bindAlergias();
        }
        private void bindAlergias()
        {
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                if (Request.QueryString["PESS_PK_ID"] == null)
                {
                    var pesAler = new List<ALERGIA>();
                    foreach (var item in ListaAlergias)
                    {
                        pesAler.Add(ctx.ALERGIA.FirstOrDefault(x => x.ALER_PK_ID == item.ALERGIA.ALER_PK_ID));
                    }

                    lvAlergias.DataSource = pesAler;
                    lvAlergias.DataBind();
                }
                else
                {
                    var pk = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);

                    var pesAler = new List<ALERGIA>();
                    foreach (var item in ctx.PESSOA_FISICA_ALERGIA.Where(x => x.PESSOA_FISICA.PEFI_PK_FK_PESS == pk))
                    {
                        pesAler.Add(ctx.ALERGIA.FirstOrDefault(x => x.ALER_PK_ID == item.ALERGIA.ALER_PK_ID));
                    }

                    lvAlergias.DataSource = pesAler;
                    lvAlergias.DataBind();
                }
            }
            upMedicacoes.Update();
        }
        #endregion

        #region Gerar Boleto
        //protected void gerarBoleto(object sender, EventArgs e)
        //{
        //    if (string.IsNullOrEmpty(hfIndexGerarBoleto.Value))
        //    {
        //        gerarBoletoDesp(sender, e);
        //    }
        //    else
        //    {
        //        gerarBoletoServico(sender, e);
        //    }
        //}

        protected void gerarBoleto(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtDataVencBoleto.Text) || String.IsNullOrWhiteSpace(ddlCatFinanGerarBoleto.SelectedValue))
            {
                jsAlert(upModalGerarBoleto, "boletoinvalido", "Preencha todos os campos");
                ddlCatFinanGerarBoleto.Focus();
                return;
            }
            else
            {
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    decimal valor = Convert.ToDecimal(ctx.PESSOA_DESPESA_AVULSA.Where(x => x.PESSOA.PESS_PK_ID == idPessoa && x.DUPLICATA == null).Sum(x => x.PEDA_VALOR));
                    int catFinanceira = Convert.ToInt32(ddlCatFinanGerarBoleto.SelectedValue);
                    var cat = ctx.CATEGORIA_FINANCEIRO.FirstOrDefault(x => x.CAFI_PK_ID == catFinanceira);

                    DUPLICATA du = new DUPLICATA();
                    du.PESSOA = ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == Pessoa.PESS_PK_ID);
                    du.DUPL_DIGITO = "";
                    du.DUPL_NUMERO = "1000";
                    du.DUPL_TIPO = 1;
                    du.CATEGORIA_FINANCEIRO = cat;
                    du.CONTA_BANCARIA = cat.CONTA_BANCARIA;
                    du.DUPL_DATA_REGISTRO = DateTime.Now;
                    du.DUPL_DATA_EMISSAO = DateTime.Now;
                    du.DUPL_DATA_VENCTO = DateTimeNulo(txtDataVencBoleto.Text);
                    du.DUPL_VALOR_BRUTO = Convert.ToDouble(valor);
                    du.DUPL_MES_COMPETENCIA = Convert.ToByte(Convert.ToDateTime(txtDataVencBoleto.Text).Month);
                    du.DUPL_ANO_COMPETENCIA = Convert.ToDateTime(txtDataVencBoleto.Text).Year;
                    du.DUPL_VALOR_JUROS = 0;
                    du.DUPL_VALOR_DESCONTO = 0;
                    du.DUPL_PREVISAO = false;
                    du.DUPL_BANCO_ENVIO = false;
                    du.DUPL_BANCO_NUMERO = "";
                    du.DUPL_STATUS = 1;
                    du.DUPL_CARTEIRA = (cat.CONTA_BANCARIA != null ? cat.CONTA_BANCARIA.COBA_CARTEIRA : null);
                    du.DUPL_OBSERVACAO = "";
                    du.DUPL_SHOPLINE = false;

                    if (Utilitarios.UsuarioLogado.ENTIDADE != null)
                        du.PESSOAPrincipal = Utilitarios.UsuarioLogado.ENTIDADE.PESSOA_JURIDICA.PESSOA;

                    ctx.AddToDUPLICATA(du);

                    foreach (var item in ctx.PESSOA_DESPESA_AVULSA.Where(x => x.PESSOA.PESS_PK_ID == Pessoa.PESS_PK_ID && x.DUPLICATA == null))
                    {
                        item.DUPLICATA = du;
                    }

                    ctx.SaveChanges();
                }
            }

            ddlCatFinanGerarBoleto.SelectedIndex = -1;
            txtDataVencBoleto.Text = string.Empty;
            hfIndexGerarBoleto.Value = string.Empty;
            ScriptManager.RegisterClientScriptBlock(upModalGerarBoleto, upModalDesp.GetType(), "fecharGerarBoleto", "$('#fecharGerarBoleto').trigger('click')", true);
            bindDespesas();
            upDespesas.Update();
            upHistFinan.Update();
        }

        protected void gerarBoletoServico(object sender, EventArgs e)
        {
            bool valido = false;
            foreach (var item in lvServico.Items)
            {
                if ((item.FindControl("cbProcessar") as CheckBox).Checked)
                {
                    valido = true;
                }
            }

            if (valido == false)
            {
                jsAlert(upModalGerarBoletoServ, "boletoinvalido", "Selecione um serviço para gerar o boleto!");
                ScriptManager.RegisterClientScriptBlock(upModalGerarBoletoServ, upModalGerarBoletoServ.GetType(), "fecharGerarBoletoServ", "$('#fecharGerarBoletoServ').trigger('click')", true);
                return;
            }
            else
            {
                if (string.IsNullOrEmpty(txtDataVencBoletoServ.Text) || String.IsNullOrWhiteSpace(ddlCatFinanGerarBoletoServ.SelectedValue))
                {
                    jsAlert(upModalGerarBoletoServ, "boletoinvalido", "Preencha todos os campos");
                    ddlCatFinanGerarBoletoServ.Focus();
                    return;
                }
                else
                {
                    using (FederacaoEntities ctx = new FederacaoEntities())
                    {
                        var pk = Convert.ToInt32(Request.QueryString["PESS_PK_ID"]);

                        int catFinanceira = Convert.ToInt32(ddlCatFinanGerarBoletoServ.SelectedValue);
                        var cat = ctx.CATEGORIA_FINANCEIRO.FirstOrDefault(x => x.CAFI_PK_ID == catFinanceira && x.CONTA_BANCARIA.PESSOAPrincipal.PESS_PK_ID == Utilitarios.UsuarioLogado.ENTIDADE.ENTI_PK_FK_PEJU);
                        double valortotal = 0;

                        DUPLICATA du = new DUPLICATA();
                        du.PESSOA = ctx.PESSOA.FirstOrDefault(x => x.PESS_PK_ID == pk);
                        du.DUPL_DIGITO = "";
                        du.DUPL_NUMERO = "1000";
                        du.DUPL_TIPO = 1;
                        du.CATEGORIA_FINANCEIRO = cat;
                        du.CONTA_BANCARIA = cat.CONTA_BANCARIA;
                        du.PESSOAPrincipal = cat.CONTA_BANCARIA.PESSOAPrincipal;
                        du.DUPL_DATA_REGISTRO = DateTime.Now;
                        du.DUPL_DATA_EMISSAO = DateTime.Now;
                        du.DUPL_DATA_VENCTO = Convert.ToDateTime(txtDataVencBoletoServ.Text);
                        du.DUPL_MES_COMPETENCIA = Convert.ToByte(Convert.ToDateTime(txtDataVencBoletoServ.Text).Month);
                        du.DUPL_ANO_COMPETENCIA = Convert.ToDateTime(txtDataVencBoletoServ.Text).Year;
                        du.DUPL_VALOR_JUROS = 0;
                        du.DUPL_VALOR_DESCONTO = 0;
                        du.DUPL_PREVISAO = false;
                        du.DUPL_BANCO_ENVIO = false;
                        du.DUPL_BANCO_NUMERO = "";
                        du.DUPL_STATUS = 1;
                        du.DUPL_CARTEIRA = cat.CONTA_BANCARIA != null ? cat.CONTA_BANCARIA.COBA_CARTEIRA : null;
                        du.DUPL_OBSERVACAO = "";
                        du.DUPL_SHOPLINE = false;

                        foreach (var item in lvServico.Items)
                        {
                            if ((item.FindControl("cbProcessar") as CheckBox).Checked)
                            {
                                int hfPKObj = Convert.ToInt32((item.FindControl("hfPKObj") as HiddenField).Value);
                                var duplcom = ctx.DUPLICATA_COMPOSICAO.Where(x => x.CONTRATO_SERVICO.COSE_PK_ID == hfPKObj).FirstOrDefault();

                                if (duplcom == null)
                                {
                                    double valor = Convert.ToDouble(ctx.CONTRATO_SERVICO.Where(x => x.COSE_PK_ID == hfPKObj).FirstOrDefault().COSE_VALOR);

                                    DUPLICATA_COMPOSICAO dupcomp = new DUPLICATA_COMPOSICAO();
                                    dupcomp.CATEGORIA_FINANCEIRO = cat;
                                    dupcomp.CONTRATO_SERVICO = ctx.CONTRATO_SERVICO.Where(x => x.COSE_PK_ID == hfPKObj).FirstOrDefault();
                                    dupcomp.DUCO_VALOR = valor;
                                    dupcomp.DUPLICATA = du;
                                    ctx.AddToDUPLICATA_COMPOSICAO(dupcomp);
                                    valortotal += valor;
                                }
                            }
                        }
                        du.DUPL_VALOR_BRUTO = valortotal;
                        du.FORMA_PAGTO = ctx.FORMA_PAGTO.Where(p => p.FOPA_PK_ID == 12).FirstOrDefault(); //boleto

                        if (valortotal > 0)
                        {
                            ctx.AddToDUPLICATA(du);
                            ctx.SaveChanges();
                        }
                    }
                }

                ddlCatFinanGerarBoletoServ.SelectedIndex = -1;
                txtDataVencBoletoServ.Text = string.Empty;
                hfIndexGerarBoletoServ.Value = string.Empty;

                ScriptManager.RegisterClientScriptBlock(upModalGerarBoletoServ, upModalGerarBoletoServ.GetType(), "fecharGerarBoletoServ", "$('#fecharGerarBoletoServ').trigger('click')", true);
                bindServicos();
                upServ.Update();

                Ajax.JavascriptExecute(upHistFinan, "DispararBusca();");
                upHistFinan.Update();
            }

        }

        #endregion

        #region BIND HISTORICO EMAILS
        protected void lkbCarrega_HistoricoEmail_Click(object sender, EventArgs e)
        {
            CarregaHistoricoEmail();
        }

        protected void CarregaHistoricoEmail()
        {
            using (FederacaoEntities db = new FederacaoEntities())
            {
                int ID = 0;
                if (Int32.TryParse(Request.QueryString["PESS_PK_ID"], out ID))
                {
                    List<PESSOA_HISTORICO_EMAIL> HistoricoEmail = db.PESSOA_HISTORICO_EMAIL.Where(x => x.PESSOA.PESS_PK_ID == ID).OrderByDescending(x => x.PEHE_DATA).ToList();
                    if (HistoricoEmail != null)
                    {
                        LEmail = HistoricoEmail;
                        ListaEmailProp_Paginacao();
                    }
                }
                Ajax.jQueryExecuteReady(upHistoricoEmail, "$('.btnHistoricoEmail').hide(); ModalHistoricoEmail();");
            }
        }
        #endregion

        #region BIND HISTORICO SMS
        protected void lkbCarrega_HistoricoSMS_Click(object sender, EventArgs e)
        {
            CarregaHistoricoSMS();
        }

        protected void CarregaHistoricoSMS()
        {
            using (FederacaoEntities db = new FederacaoEntities())
            {
                int ID = 0;
                if (Int32.TryParse(Request.QueryString["PESS_PK_ID"], out ID))
                {
                    var HistoricoSMS = db.PESSOA_HISTORICO_SMS.Where(x => x.PESSOA.PESS_PK_ID == ID).Select(x => new { x.PEHS_DATAHORA, x.PEHS_NUM_CELULAR, x.PEHS_ERRO, x.PEHS_TEXTO, x.EMAILBOX }).OrderByDescending(x => x.PEHS_DATAHORA);
                    if (HistoricoSMS != null)
                    {
                        ListHistoricoSMS.DataSource = HistoricoSMS;
                        ListHistoricoSMS.DataBind();

                        uppHistoricoSMS.Update();
                    }
                }
                Ajax.jQueryExecuteReady(uppHistoricoSMS, "$('.btnHistoricoSMS').hide();");
            }
        }
        #endregion

        #region FUNCOES

        private void troca_estado()
        {
            //ao trocar o estado, limpa tds os campos do drop de municipio(caso ja existam), e adiciona 
            //novamente, filtrando pelo estado escolhido
            if (!String.IsNullOrWhiteSpace(ddlEst.SelectedValue))
            {
                ddlMun.Enabled = true;

                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    ddlMun.DataTextField = "MUN_DESCRICAO";
                    ddlMun.DataValueField = "MUNI_PK_ID";
                    ddlMun.DataSource = ctx.MUNICIPIO.Where(p => p.MUN_ESTADO == ddlEst.SelectedItem.Text);
                    ddlMun.DataBind();

                }
            }
            else
                ddlMun.Enabled = false;

            ddlBai.Enabled = false;
            ddlBai.SelectedIndex = -1;
        }

        //condição para mostrar o botão Gerar Boleto apenas quando a lista de despesas ter algum registro
        private void verificaListaDespesa()
        {
            if (lvDespesas.Items.Count > 0)
            {
                dvGerarBoleto.Visible = true;
            }
            else
            {
                dvGerarBoleto.Visible = false;
            }
        }

        //condição para mostrar o botão Gerar Boleto apenas quando a lista de serviços contenha algum registro
        private void verificaListaServico()
        {
            if (lvServico.Items.Count > 0)
            {
                dvGerarBoletoServ.Visible = true;
            }
            else
            {
                dvGerarBoletoServ.Visible = false;
            }
        }
        private void troca_municipio()
        {
            //ao trocar o municipio, limpa tds os campos do drop de bairro(caso ja existam), e adiciona
            //novamente, filtrando pelo municipio escolhido
            if (!String.IsNullOrWhiteSpace(ddlMun.SelectedValue))
            {
                ddlBai.Enabled = true;

                int value = Convert.ToInt32(ddlMun.SelectedValue);
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    ddlBai.DataTextField = "BAIR_DESCRICAO";
                    ddlBai.DataValueField = "BAIR_PK_ID";
                    ddlBai.DataSource = ctx.BAIRRO.Where(p => p.MUNICIPIO.MUNI_PK_ID == value);
                    ddlBai.DataBind();

                }
            }
            else
                ddlBai.Enabled = false;
        }

        private void jsAlert(System.Web.UI.Control _control, string _funcao, string _alerta)
        {
            ScriptManager.RegisterClientScriptBlock
                (_control,
                _control.GetType(),
                _funcao, string.Format("alert('{0}')", _alerta),
                true
                );
        }

        protected void autoCompletaIdade(object sender, EventArgs e)
        {
            try
            {
                DateTime? data = Convert.ToDateTime(((TextBox)sender).Text);
                string idade = Texto.calculaIdade(data);
                txtIdade.Text = txtIdade_DM.Text = idade;
            }
            catch (Exception ex)
            {
                Log.Logar(ex);
                txtNasc.Text = txtIdade.Text = txtIdade_DM.Text = string.Empty;
            }
            finally
            {
                ScriptManager.RegisterClientScriptBlock(upIdade, upIdade.GetType(), "atumaster",
                    "$(document).ready(function () { $('.maskdata').mask('99/99/9999'); verificaData(); });", true);
                CadastroMasks();
            }
        }

        private string stringNula(string _value)
        {
            return string.IsNullOrEmpty(_value) ? null : _value;
        }

        private DateTime? DateTimeNulo(string _value)
        {
            try
            {
                if (string.IsNullOrEmpty(_value))
                    return null;
                else
                    return Convert.ToDateTime(_value);
            }
            catch (Exception ex)
            {
                Log.Logar(ex);
                return null;
            }
        }

        private Double? doubleNulo(string _value)
        {
            try
            {
                if (string.IsNullOrEmpty(_value))
                    return null;
                else
                    return Convert.ToDouble(_value);
            }
            catch (Exception ex)
            {
                Log.Logar(ex);
                return null;
            }
        }

        private int? intNulo(string _value)
        {
            if (string.IsNullOrEmpty(_value))
                return null;
            else
                return Convert.ToInt32(_value);
        }

        protected string tipotelefone(byte tipo)
        {
            switch (tipo)
            {
                case 1:
                    return "Residencial";
                case 2:
                    return "Celular";
                case 3:
                    return "Comercial";
                case 4:
                    return "Nextel";
                case 5:
                    return "Fax";
                default:
                    return String.Empty;
            }
        }
        protected string status(int? tipo)
        {
            switch (tipo)
            {
                case 1:
                    return "Válido";
                case 2:
                    return "Em aberto";
                case 3:
                    return "Vencido";
                default:
                    return String.Empty;
            }
        }
        protected string MontaLink(string cod)
        {
            if (!string.IsNullOrEmpty(cod) && cod != "0")
            {
                return string.Format("<a href='../DUPLICATA/Edit.aspx?DUPL_PK_ID={0}' target='_blank'>{0}</a>", cod);
            }
            else
            {
                return "-";
            }
        }
        #endregion

        #region DropListBanco
        protected void preencheDropBanco()
        {
            FederacaoEntities App = new FederacaoEntities();

            ddlBancos.DataSource = App.BANCO.OrderBy(x => x.BANC_NOME).Select(x => new { x.BANC_PK_ID, BANC_NOME = x.BANC_NUMERO + " - " + x.BANC_NOME });
            ddlBancos.DataBind();

            ddlBancos.Items.Insert(0, new ListItem("--Selecione--", String.Empty));

        }
        #endregion

        #region DropListCategoriaFinanceira

        protected void preencherDropCategoriaFincaneira()
        {
            using (FederacaoEntities ctx = new FederacaoEntities())
            {
                ddlCatFincaneiro.DataSource = ctx.CATEGORIA_FINANCEIRO.Where(x => x.CAFI_ATIVO).Select(x => new { x.CAFI_PK_ID, x.CAFI_DESCRICAO });
                ddlCatFincaneiro.DataBind();
                ddlCatFinanGerarBoleto.DataSource = ctx.CATEGORIA_FINANCEIRO.Where(x => x.CAFI_ATIVO).Select(x => new { x.CAFI_PK_ID, x.CAFI_DESCRICAO });
                ddlCatFinanGerarBoleto.DataBind();
                if (Utilitarios.UsuarioLogado.UsuarioEntidade)
                {
                    ddlCategFinanServ.DataSource = ctx.CATEGORIA_FINANCEIRO.Where(x => x.CAFI_ATIVO && x.CONTA_BANCARIA.PESSOAPrincipal.PESS_PK_ID == Utilitarios.UsuarioLogado.ENTIDADE.ENTI_PK_FK_PEJU).Select(x => new { x.CAFI_PK_ID, x.CAFI_DESCRICAO });
                    ddlCategFinanServ.DataBind();

                    ddlCatFinanGerarBoletoServ.Items.Insert(0, new ListItem("--Selecione--", String.Empty));
                    ddlCatFinanGerarBoletoServ.DataSource = ctx.CATEGORIA_FINANCEIRO.Where(x => x.CAFI_ATIVO && x.CONTA_BANCARIA.PESSOAPrincipal.PESS_PK_ID == Utilitarios.UsuarioLogado.ENTIDADE.ENTI_PK_FK_PEJU).Select(x => new { x.CAFI_PK_ID, x.CAFI_DESCRICAO });
                    ddlCatFinanGerarBoletoServ.DataBind();

                }
                ddlCatFincaneiro.Items.Insert(0, new ListItem("--Selecione--", String.Empty));
                ddlCatFinanGerarBoleto.Items.Insert(0, new ListItem("--Selecione--", String.Empty));

                ddlCategFinanServ.Items.Insert(0, new ListItem("--Selecione--", String.Empty));
            }
        }

        #endregion

        protected void ddlNacio_SelectedIndexChanged(object sender, EventArgs e)
        {
            upFedRepr.Update();
            CadastroMasks();
        }

        #region Métodos para upload de assinatura - pessoa física
        protected void afuAssinatura_UploadedComplete(object sender, AjaxControlToolkit.AsyncFileUploadEventArgs e)
        {
            string[] extensoes = { "jpg", "jpeg" };
            if (e.State == AjaxControlToolkit.AsyncFileUploadState.Success)
            {
                var nomeArquivo = e.FileName.Split('\\').Last();
                var extensao = nomeArquivo.Split('.').LastOrDefault();
                if (extensoes.Any(x => x == extensao.ToLower()))
                {
                    var path = Server.MapPath(String.Format("~/uploads/pessoa/temp/{0}/assinatura/", Session.SessionID));
                    if (!Directory.Exists(path))
                        Directory.CreateDirectory(path);

                    pathAssinatura = String.Format("~/uploads/pessoa/temp/{0}/assinatura/{1}", Session.SessionID, nomeArquivo);
                    afuAssinatura.SaveAs(path + nomeArquivo);
                    afuAssinatura.ClearAllFilesFromPersistedStore();
                    afuAssinatura.Dispose();
                }
                else
                    Ajax.JavascriptAlert(this, "Arquivo inválido! Utilize somente arquivos '.jpg'.");
            }
            else
                Ajax.JavascriptAlert(this, "Arquivo inválido!");
        }

        protected void btnForceImgAssinaturaBind_Click(object sender, EventArgs e)
        {
            imgAssinatura.ImageUrl = pathAssinatura ?? "~/assets/img/semImagem.jpg";
            imgAssinatura.DataBind();
            upImagemAssinatura.Update();
            CadastroMasks();
        }

        protected void lkbRemoverAssinatura_Click(object sender, EventArgs e)
        {
            pathAssinatura = null;
            btnForceImgAssinaturaBind_Click(null, EventArgs.Empty);
            CadastroMasks();

        }
        #endregion

        protected void lbBuscar_Click(object sender, EventArgs e)
        {
            try
            {
                Buscar();
                CadastroMasks();
            }
            catch (Exception ex)
            {
                Ajax.JavascriptAlert(Page, ex.Message.ToString());
            }
        }

        protected void ValidaResp()
        {
            using (FederacaoEntities ctx = new FederacaoEntities())
            {

                if (ctx.PESSOA_RESPONSAVEL.Where(p => p.PESSOA.PESS_PK_ID == idPessoa).ToList().Count > 0)
                {
                    RespFinan.Enabled = true;
                    RespFinan.Checked = false;
                }

            }
            CadastroMasks();
        }

        public void Buscar()
        {

            lvHistorico.DataSource = null;
            lvHistorico.DataBind();

            byte situaDupl = Convert.ToByte(ddlSituaDupl.SelectedValue);

            DateTime? dataIni;
            if (txtFiltroDataInicial.Text != "")
                dataIni = Convert.ToDateTime(txtFiltroDataInicial.Text);
            else
                dataIni = null;

            DateTime? dataFim;
            if (txtFiltroDataFinal.Text != "")
                dataFim = Convert.ToDateTime(txtFiltroDataFinal.Text);
            else
                dataFim = null;

            int ID = 0;
            if (Int32.TryParse(Request.QueryString["PESS_PK_ID"], out ID))
            {
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    IEnumerable<DUPLICATA> listaDuplicatas;
                    if (!String.IsNullOrEmpty(Session["PESSOA#TipoFiltro"].ToString()) && Session["PESSOA#TipoFiltro"].ToString() == PESSOA_TIPO_FILTRO.PROPRIETARIO)
                    {
                        List<int> listDulpCava = new List<int>();
                        foreach (var item in ctx.CAVALO_PROPRIETARIO.Where(c => c.PESSOA.PESS_PK_ID == ID && c.CAPR_DATA_FIM == null))
                            listDulpCava.AddRange(from itemTorInsSer in ctx.TORNEIO_INSCRICAO_SERIE.Where(t => t.CAVALEIRO.PESSOA_FISICA.PEFI_PK_FK_PESS != ID
                                                          && t.CAVALO.CAVA_PK_ID == item.CAVALO.CAVA_PK_ID && t.DUPLICATA != null)
                                                  .Select(t => new { t.DUPLICATA.DUPL_PK_ID }).Distinct()
                                                  select itemTorInsSer.DUPL_PK_ID);

                        listaDuplicatas = ctx.DUPLICATA.Where(p => ((p.PESSOA.PESS_PK_ID == ID && p.DUPL_STATUS == 1) || (listDulpCava.Contains(p.DUPL_PK_ID))) &&
                                                                           p.DUPL_DATA_VENCTO >= dataIni && p.DUPL_DATA_VENCTO <= dataFim &&
                                                                           (situaDupl == 0 || (situaDupl == 1 && p.DUPL_DATA_PAGTO != null) ||
                                                                           (situaDupl == 2 && p.DUPL_DATA_PAGTO == null)))
                                                                .OrderBy(x => x.DUPL_DATA_VENCTO);
                    }
                    else
                    {
                        listaDuplicatas = ctx.DUPLICATA.Where(p => p.PESSOA.PESS_PK_ID == ID && p.DUPL_STATUS == 1 &&
                                                              p.DUPL_DATA_VENCTO >= dataIni && p.DUPL_DATA_VENCTO <= dataFim &&
                                                              (situaDupl == 0 || (situaDupl == 1 && p.DUPL_DATA_PAGTO != null) ||
                                                                 (situaDupl == 2 && p.DUPL_DATA_PAGTO == null)))
                                                  .OrderBy(x => x.DUPL_DATA_VENCTO);
                    }

                    lvHistorico.DataSource = listaDuplicatas;
                    lvHistorico.DataBind();
                }
            }
        }

        protected bool URLValida(string url)
        {
            string pattern = @"^(http|https|ftp|)\://|[a-zA-Z0-9\-\.]+\.[a-zA-Z](:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&amp;%\$#\=~])*[^\.\,\)\(\s]$";
            Regex reg = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
            return reg.IsMatch(url);
        }

        protected void btnIncResp_Click(object sender, EventArgs e)
        {
            txtResp.Text = string.Empty;
            RespFinan.Enabled = false;
            setValAcao = 0;
            ValidaResp();
            Ajax.JavascriptExecute(upModalResp, "$('#modalResp').modal('show');");
            upModalResp.Update();
            CadastroMasks();
        }

        protected string VerificaStatusEnvio(EMAILBOX pEMAILBOX, DateTime pPEHE_DATA)
        {
            string tagHtml = "";
            if (pEMAILBOX == null)
                tagHtml = ($"<button title='Data e Hora de Envio: {pPEHE_DATA}'><i class=\"icon-ok\"></i></button>");
            else
            {
                using (FederacaoEntities db = new FederacaoEntities())
                {
                    DateTime? DATAHORAEmailBox = Input.Utilitarios.DataHora.ConverterClarionToMS(pEMAILBOX.DATA, pEMAILBOX.HORA);

                    switch (pEMAILBOX.LOCAL)
                    {
                        case "S":
                            if (String.IsNullOrEmpty(pEMAILBOX.RESULTADO))
                                tagHtml = "<button title='Preparando para ser enviado'><i class=\"icon-time\"></i></button>";
                            else
                                tagHtml = ($"<button title='Erro: {pEMAILBOX.RESULTADO}'><i class=\"icon-remove\"></i></button>");
                            break;

                        case "F":
                            tagHtml = ($"<button title='Erro: {pEMAILBOX.RESULTADO}'><i class=\"icon-remove\"></i></button>");
                            break;

                        case "E":
                            tagHtml = ($"<button title='Data e Hora de Envio: {DATAHORAEmailBox}'><i class=\"icon-ok\"></i></button>");
                            break;
                    }
                }
            }
            CadastroMasks();
            return tagHtml;
        }

        protected void ReenviarEmail(object sender, EventArgs e)
        {
            Button btn = (Button)sender;
            int ID = Convert.ToInt32(btn.CommandArgument);

            using (FederacaoEntities db = new FederacaoEntities())
            {
                var EmailBox = db.EMAILBOX.Where(x => x.ID == ID).FirstOrDefault();
                EmailBox.LOCAL = "S";
                EmailBox.RESULTADO = "";
                db.SaveChanges();
                CarregaHistoricoEmail();
            }
        }

        protected void ModalDespCalculaTotal(object sender, EventArgs e)
        {
            Decimal valor;
            Int32 qtd;
            if (txtValorDesp.Text != "" && txtQTDDesp.Text != "" && Decimal.TryParse(txtValorDesp.Text, out valor) && Int32.TryParse(txtQTDDesp.Text, out qtd))
                lblTotalDesp.Text = (valor * qtd).ToString("F2");
            CadastroMasks();
        }
        protected void CadastroMasks()
        {
            if (Utilitarios.Configuracao.CONF_CADASTROONLINE_LETRASMAIUSCULAS ?? false)
            {
                Ajax.jQueryExecuteReady(this, "$('.form-control').css('text-transform', 'uppercase');");
            }
            Ajax.jQueryExecuteReady(this, "$('#" + txtCPFnum.ClientID + "').mask('999.999.999-99');");

        }

        protected IHtmlString Style
        {
            get
            {
                return Styles.Render(BundlePath.PessoaCSS);
            }
        }

        protected IHtmlString Script
        {
            get
            {
                return Scripts.Render(BundlePath.PessoaJS);
            }
        }
        protected void carregaFederacoes()
        {
            using (var ctx = new FederacaoEntities())
            {
                if (int.TryParse(Request.QueryString["PESS_PK_ID"], out int ID))
                {
                    if (isEntidade(ID))
                    {
                        var Entidade = ctx.ENTIDADE.FirstOrDefault(x => x.ENTI_PK_FK_PEJU == ID);
                        var pessoaFed = ctx.PESSOA.Where(x => ctx.FEDERACAO_HIPISMO.Any(y => y.FEHI_PK_FK_PEJU == x.PESS_PK_ID));
                        ddlFederacao.DataSource = pessoaFed;
                        ddlFederacao.DataBind();

                        if (Entidade.FEDERACAO_HIPISMO.FEHI_PK_FK_PEJU != 0)
                            ddlFederacao.SelectedValue = Entidade.FEDERACAO_HIPISMO.FEHI_PK_FK_PEJU.ToString();
                    }
                    else
                    {
                        controleEntidade.Visible = false;
                    }
                }
            }
        }
        protected void salvarFederacao()
        {
            using (var ctx = new FederacaoEntities())
            {

                if (int.TryParse(Request.QueryString["PESS_PK_ID"], out int ID))
                {
                    if (isEntidade(ID))
                    {
                        var PESSOA = ctx.PESSOA.Where(x => x.PESS_PK_ID == ID);
                        var federacao = Convert.ToInt32(ddlFederacao.SelectedValue);
                        var hip = ctx.FEDERACAO_HIPISMO.FirstOrDefault(x => x.FEHI_PK_FK_PEJU == federacao);
                        PESSOA.FirstOrDefault().PESSOA_JURIDICA.ENTIDADE.FEDERACAO_HIPISMO = hip;
                        ctx.SaveChanges();
                    }

                }
            }
        }
        protected bool isEntidade(int ID)
        {
            using (var ctx = new FederacaoEntities())
            {
                var ENTIDADE = ctx.ENTIDADE.Where(x => x.ENTI_PK_FK_PEJU == ID);
                if (ENTIDADE.Count() != 0) return true;
            }
            return false;
        }

        #region Paginação da Tab Email
        private void ListaEmailProp_Paginacao()
        {
            try
            {
                using (FederacaoEntities ctx = new FederacaoEntities())
                {
                    int ID = 0;
                    if (Int32.TryParse(Request.QueryString["PESS_PK_ID"], out ID))
                    {
                        List<PESSOA_HISTORICO_EMAIL> HistoricoEmail = db.PESSOA_HISTORICO_EMAIL.Where(x => x.PESSOA.PESS_PK_ID == ID).OrderByDescending(x => x.PEHE_DATA).ToList();
                        LEmail = HistoricoEmail;

                        ListHistoricoEmail.DataSource = HistoricoEmail;

                        ListHistoricoEmail.DataBind();
                    }
                }
                ListHistoricoEmail.DataBind();
                upHistoricoEmail.Update();
                ltTotalPage.Text = (LEmail != null || LEmail.Count / dpRegistros.PageSize != 1) ? ((LEmail.Count % dpRegistros.PageSize != 0) ? (LEmail.Count / dpRegistros.PageSize) + 1 : (LEmail.Count / dpRegistros.PageSize)).ToString() : "1";
                paginaEmailProp = ((dpRegistros.StartRowIndex) / dpRegistros.MaximumRows) + 1;
                txtPagina.Text = (paginaEmailProp).ToString();
            }
            catch (Exception ex)
            {
                hfErro.Value = ex.Message;
                Ajax.JavascriptAlert(this, "ERRO: Um erro ocorreu durante o carregamento dos registros!");
            }
        }
        protected void NextPageEmailProp(object sender, EventArgs e)
        {
            if (!String.IsNullOrEmpty(txtPagina.Text))
            {
                if (int.Parse(txtPagina.Text) <= 1)
                {
                    dpRegistros.SetPageProperties(0, dpRegistros.MaximumRows, true);
                    ListaEmailProp_Paginacao();
                    txtPagina.Text = "1";
                }
                else
                {
                    paginaEmailProp = (int.Parse(txtPagina.Text) >= int.Parse(ltTotalPage.Text)) ? int.Parse(ltTotalPage.Text) : !String.IsNullOrEmpty(txtPagina.Text) ? int.Parse(txtPagina.Text) : 1;
                    dpRegistros.SetPageProperties((paginaEmailProp - 1) * dpRegistros.PageSize, dpRegistros.MaximumRows, true);
                    ListaEmailProp_Paginacao();
                }
            }
            txtPagina.Focus();
        }
        protected void lvEmail_PagePropertiesChanged(object sender, EventArgs e)
        {
            ListaEmailProp_Paginacao();
        }
        protected void ddlPaginacaoEmailProp_TextChanged(object sender, EventArgs e)
        {
            var PSize = int.Parse(ddlPaginacao.SelectedValue);
            txtPagina.Text = "1";
            dpRegistros.PageSize = PSize;
            dpRegistros.SetPageProperties(0, dpRegistros.MaximumRows, true);
            ListaEmailProp_Paginacao();
            txtPagina.Text = "1";
            upHistoricoEmail.Update();
        }

        #endregion

        protected void lvHistorico_ItemDataBound(object sender, ListViewItemEventArgs e)
        {
            try
            {
                if (e.Item.DataItem is DUPLICATA dupl && e.Item is ListViewDataItem lvHistoricoItem)
                {
                    if (lvHistoricoItem.FindControl("lkbPagamento") is LinkButton lkbPagamento)
                    {
                        if (dupl.DUPL_STATUS == 1 && dupl.DUPL_DATA_CREDITO == null)
                        {
                            var urlPagamento = "";
                            var mostraLinkPagamento = true;
                            if (string.IsNullOrWhiteSpace(dupl.DUPL_TXID_ITAUPIX))
                            {
                                urlPagamento = String.Format("../pagamento/Default.aspx?ID={0}", dupl.DUPL_PK_ID);
                                lkbPagamento.ToolTip = "Imprimir boleto";
                            }
                            else
                            {
                                urlPagamento = $"../pagamento/Pix.aspx?TXID={dupl.DUPL_TXID_ITAUPIX}";
                                lkbPagamento.ToolTip = "Imprimir Pix";
                            }

                            lkbPagamento.PostBackUrl = urlPagamento;
                            lkbPagamento.Visible = mostraLinkPagamento;
                        }
                    }

                    if (lvHistoricoItem.FindControl("litStatusPagamento") is Literal litStatusPagamento)
                        litStatusPagamento.Text = (dupl.DUPL_STATUS == 1 ? (dupl.DUPL_DATA_CREDITO == null ? "<td style=\"color:Red\">Pendente</td>" : "<td style=\"color:Green\">Pago</td>") : "<td>Inativa</td>");
                }
            }
            catch (Exception ex)
            {
                Ajax.JavascriptAlert(Page, ex.Message.ToString());
            }
        }

        protected void lbEditDocumento_Click(object sender, EventArgs e)
        {

        }
    }
    #region Classes
    public class Permissoes
    {
        private string perfil { get; set; }
        public string _perfil { get { return perfil; } }

        public Permissoes(string Perfil)
        {
            this.perfil = Perfil;
        }

        public bool Permissao(Double _cod)
        {
            return Utilitarios.UsuarioLogado.VerificaPermissao(_cod);
        }
    }
    internal class Servicos
    {
        public int COSE_PK_ID { get; set; }
        public DateTime? COSE_DATA_INI { get; set; }
        public DateTime? COSE_DATA_FIM { get; set; }
        public Double? COSE_VALOR { get; set; }
        public String COSE_STATUS { get; set; }
        public int? COSE_FK_CAF { get; set; }
        public int DUPL_PK_ID { get; set; }
        public string CAFI_DESCRICAO { get; set; }
    }
    #endregion
}
