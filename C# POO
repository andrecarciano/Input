Estrutura de Classes e Metodos

- Niveis de Acesso de Metodos e classes
-Acesso-     -Tipo-      -Retorno-        -Nome-              -(Parametros)-      -{Instruções}-
           -complexos- 

Public        Class          X          Nome da Classe     -----------X----------- {Estrutura}
Private       interface      X          Nome da Interface  -----------X----------- {Estrutura}
Internal      struct         X          Nome da Struct     -----------X----------- {Estrutura} 
protected     

           -tipos de classe-
   ''         abstract        
   ''         static                    
   ''         sealed
   ''         partial

             -metodos-

   ''          virtual      void         Nome do Método     -----(parametros)----- {Instruções}
   ''          override     int          Nome do Método     -----(parametros)----- {Instruções}
   ''          static       string       Nome do Método     -----(parametros)----- {Instruções}
   ''          delegate     double       Nome do Método     -----(parametros)----- {Instruções} 
   ''            '' 
   ''            ''   


CLASSE ABSTRATA: public abstract class NomeDaClasse{}
__________________________________________________________________________________________________________________________
                                            EVENT
public event EventHandler NomedoEventoEvent;   //declaração do evento

protected virtual void OnNomedoEvento (EventArgs e)
{
           EventHandler handler = NomedoEventoEvent;
           handler?.invoke(this, e);
}

__________________________________________________________________________________________________________________________
Uso do Base
ao herdar de uma classe pai, a classe filha deve passar seus parametros para o pai resolver atraves do "base"

//metodo construtor// dessa forma o base passará o parametro para o construtor da classe pai resolver
public FILHA(string parametro) : base (parametro) {

}
//classe filha extende classe pai
__________________________________________________________________________________________________________________________

Using e Dispose
Ao implementar a interface IDisposable em uma classe, ela terá que implementar o metodo Dispose(), para destruir os objetos estanciados
depois do seu uso.
public class CLASSE : IDisposable
{
           public CLASSE(){
                      //procedimentos do contrutor
           }
           public void Dispose(){
                      //Procedimentos de Destruição do objeto
           }
}

Para automatizar o uso do dispose basta estanciar o objeto usando o "using"

using( var objeto = new CLASSE();) //estanciamento do objeto
{
           //procedimentos a serem realizados com esse objeto
} //ao sair o using chama o dispose() do objeto automaticamente

__________________________________________________________________________________________________________________________
Classe static

Ao criar uma classe estatica, ela não poderá ser estanciada e sempre estará disponivel para ser chamada.
Seus metodos devem ser todos static.
Deve ser criada em casos de ser usada em toda a aplicação como uma variavel global e não haverá varios tipos diferentes,
por exemplo configurações.
__________________________________________________________________________________________________________________________



__________________________________________________________________________________________________________________________

Classe sealed
Garante que uma classe só tenha uma forma, não permite que seja herdada por outra classe

__________________________________________________________________________________________________________________________

Up Cast e DownCast

Quando a classe filha tem todas as caracteristicas da classe pai, um objeto estanciado como filha (var = new filha) pode ser reestanciado 
como a classe pai (var = new pai)[Up cast] ou o inverso [downcast]

upcast
var objeto = new classe pai
objeto = new classe filha

CAST [downcast]
variavel = (tipo cast explicito) nome da variavel
variavel = (classe filha) objeto pai


__________________________________________________________________________________________________________________________


                                                       FUNÇÕES E COMANDOS

__________________________________________________________________________________________________________________________
:IEquatable<TEntity>
Ao implementar essa interface temos acesso ao função Equals para comparar algum atributo de dois objetos
Logica:
           return ID == TEntity.ID
__________________________________________________________________________________________________________________________

$"texto {variavel},0"

__________________________________________________________________________________________________________________________






__________________________________________________________________________________________________________________________
-Atalhos                   
ctor
prop
ctrl+K+C - comentar codigo
ctrl+K+U - descomentar codigo

__________________________________________________________________________________________________________________________


                                            Comparar Array de Bytes


arq.ARQU_ARQUIVO.SequenceEqual(arquivoBanc.ARQU_ARQUIVO)

__________________________________________________________________________________________________________________________


                                            Salvar dados em cookies

Criação de Cookie

    var objeto = new objeto();

    var modelString = JsonSerializer.Serialize(objeto);  //transforma objeto em json

    var cookieOptions = new CookieOptions
    {
        HttpOnly = true // bloqueia acesso pelo cliente
        //inserir validade do cookie
    };

    Response.Cookies.Append("configuracao", modelString, cookieOptions); //cria o cookie



Salvar dados no cookies

//verifica se existe o cookie
    if (HttpContext.Request.Cookies.ContainsKey("configuracao"))
    {
        var modelString = JsonSerializer.Serialize(objeto);  //transforma objeto em json
        HttpContext.Response.Cookies.Append("configuracao", modelString); //adiciona dado ao cookie
    }
    else
    {
        CriaCookie(objeto);
    }
}


Obter dados do cookie
public ConfiguracaoViewModel ObtemDadosCookie()
{
    if (HttpContext.Request.Cookies.ContainsKey("configuracao"))
    {
        var cookie = Request.Cookies["configuracao"];
        var obj = JsonSerializer.Deserialize<TipoDoObjeto>(cookie);
        return obj;
    }
    else
    {
        return new TipoDoObjeto();
    }
}

__________________________________________________________________________________________________________________________


                                            Converter e abrir um array de bytes em base 64


protected void visualizarDocumento(object sender, CommandEventArgs e)
{
    if (int.TryParse(e.CommandArgument.ToString(), out int idx))
    {
        var arquivo = ArquivosDocumento.ElementAt(idx);
        byte[] bytesArquivo = arquivo.ARQU_ARQUIVO;
        var baseb = Convert.ToBase64String(bytesArquivo, 0, bytesArquivo.Length);
        identDocumento.InnerText = arquivo.ARQU_TIPO == 1 ? "RG/CNH" : "Comprovante de Residência";

        if (arquivo.ARQU_DESCRICAO.ToString().ToUpper().Split('.')[1] == "PDF")
        {
            DocPdf.Src = "data:application/pdf;base64," + baseb;
            DocPdf.Visible = true;
            DocImage.Visible = false;
        }
        else
        {
            DocImage.ImageUrl = "data:image/jpeg;base64," + baseb;
            DocImage.Visible = true;
            DocPdf.Visible = false;
        }
        visDoc.Visible = true;
    }
    upListaDocumentos.Update();
}

